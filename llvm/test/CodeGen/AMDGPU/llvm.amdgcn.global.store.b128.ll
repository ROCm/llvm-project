; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx942          < %s  | FileCheck -check-prefixes=GFX,GFX-SDAG,GFX942-SDAG          %s
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx950          < %s  | FileCheck -check-prefixes=GFX,GFX-SDAG,GFX950-SDAG          %s
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx9-4-generic  < %s  | FileCheck -check-prefixes=GFX,GFX-SDAG,GFX9-4-GENERIC-SDAG  %s

; RUN: llc -global-isel=1 -mtriple=amdgcn -mcpu=gfx942          < %s  | FileCheck -check-prefixes=GFX,GFX-ISEL,GFX942-ISEL          %s
; RUN: llc -global-isel=1 -mtriple=amdgcn -mcpu=gfx950          < %s  | FileCheck -check-prefixes=GFX,GFX-ISEL,GFX950-ISEL          %s
; RUN: llc -global-isel=1 -mtriple=amdgcn -mcpu=gfx9-4-generic  < %s  | FileCheck -check-prefixes=GFX,GFX-ISEL,GFX9-4-GENERIC-ISEL  %s

;;==============================================================================
;; A few basic test cases
;;==============================================================================
define void @global_store_b128_0_00(ptr addrspace(1) %addr, <4 x i32> %data) {
; GFX-LABEL: global_store_b128_0_00:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v[0:1], v[2:5], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %addr, <4 x i32> %data, metadata !0)
  ret void
}

define void @global_store_b128_0_01(ptr addrspace(1) %addr, <4 x i32> %data) {
; GFX-LABEL: global_store_b128_0_01:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v[0:1], v[2:5], off sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %addr, <4 x i32> %data, metadata !1)
  ret void
}

define void @global_store_b128_0_10(ptr addrspace(1) %addr, <4 x i32> %data) {
; GFX-LABEL: global_store_b128_0_10:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v[0:1], v[2:5], off sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %addr, <4 x i32> %data, metadata !2)
  ret void
}

define void @global_store_b128_0_11(ptr addrspace(1) %addr, <4 x i32> %data) {
; GFX-LABEL: global_store_b128_0_11:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v[0:1], v[2:5], off sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %addr, <4 x i32> %data, metadata !3)
  ret void
}

;;==============================================================================
;; Signed offset addressing modes (derived from global-saddr-store.ll) {
;;==============================================================================

define void @global_store_i8_zext_vgpr(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_i8_zext_vgpr:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v2, v[2:3], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_store_i8_zext_vgpr:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v2, v[2:3], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep0, <4 x i32> %data, metadata !0)
  ret void
}

define void @global_store_v4i32_zext_vgpr_offset_neg128(ptr addrspace(1) %sbase, i32 %voffset, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_v4i32_zext_vgpr_offset_neg128:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v7, v6
; GFX-SDAG-NEXT:    v_mov_b32_e32 v6, v5
; GFX-SDAG-NEXT:    v_mov_b32_e32 v5, v4
; GFX-SDAG-NEXT:    v_mov_b32_e32 v4, v3
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off offset:-128 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_store_v4i32_zext_vgpr_offset_neg128:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    v_mov_b32_e32 v8, v3
; GFX-ISEL-NEXT:    v_mov_b32_e32 v9, v4
; GFX-ISEL-NEXT:    v_mov_b32_e32 v10, v5
; GFX-ISEL-NEXT:    v_mov_b32_e32 v11, v6
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_store_dwordx4 v[0:1], v[8:11], off offset:-128 sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -128
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !1)
  ret void
}

;; Maximum positive offset on gfx10
define void @global_store_i8_zext_vgpr_offset_2047(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_i8_zext_vgpr_offset_2047:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v2, v[2:3], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off offset:2047 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_store_i8_zext_vgpr_offset_2047:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v2, v[2:3], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off offset:2047 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 2047
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !2)
  ret void
}

;; Maximum negative offset on gfx10
define void @global_store_i8_zext_vgpr_offset_neg2048(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_i8_zext_vgpr_offset_neg2048:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v2, v[2:3], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off offset:-2048 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_store_i8_zext_vgpr_offset_neg2048:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v2, v[2:3], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_store_dwordx4 v[0:1], v[4:7], off offset:-2048 sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -2048
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !3)
  ret void
}
;;==============================================================================
;; } end signed offset addressing modes
;;==============================================================================

;;==============================================================================
;; Various saddr addressing modes (derived from global-saddr-load.ll) {
;;==============================================================================

define void @global_store_saddr_i8_zext_vgpr(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr, <4 x i32> %data) {
; GFX-LABEL: global_store_saddr_i8_zext_vgpr:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v0, v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v0, v[2:5], s[0:1]
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep0, <4 x i32> %data, metadata !0)
  ret void
}

define void @global_store_saddr_v4i32_zext_vgpr_offset_neg128(ptr addrspace(1) inreg %sbase, i32 %voffset, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_saddr_v4i32_zext_vgpr_offset_neg128:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v5, v4
; GFX-SDAG-NEXT:    v_mov_b32_e32 v4, v3
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, v2
; GFX-SDAG-NEXT:    v_mov_b32_e32 v2, v1
; GFX-SDAG-NEXT:    global_store_dwordx4 v0, v[2:5], s[0:1] offset:-128 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_store_saddr_v4i32_zext_vgpr_offset_neg128:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b32_e32 v6, v1
; GFX-ISEL-NEXT:    v_mov_b32_e32 v7, v2
; GFX-ISEL-NEXT:    v_mov_b32_e32 v8, v3
; GFX-ISEL-NEXT:    v_mov_b32_e32 v9, v4
; GFX-ISEL-NEXT:    global_store_dwordx4 v0, v[6:9], s[0:1] offset:-128 sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -128
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !1)
  ret void
}

;; Maximum positive offset on gfx10
define void @global_store_saddr_i8_zext_vgpr_offset_2047(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr, <4 x i32> %data) {
; GFX-LABEL: global_store_saddr_i8_zext_vgpr_offset_2047:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v0, v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v0, v[2:5], s[0:1] offset:2047 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 2047
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !2)
  ret void
}

;; Maximum negative offset on gfx10
define void @global_store_saddr_i8_zext_vgpr_offset_neg2048(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr, <4 x i32> %data) {
; GFX-LABEL: global_store_saddr_i8_zext_vgpr_offset_neg2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v0, v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    global_store_dwordx4 v0, v[2:5], s[0:1] offset:-2048 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -2048
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !3)
  ret void
}

;;------------------------------------------------------------------------------
;; Uniformity edge cases
;;------------------------------------------------------------------------------

@ptr.in.lds = internal addrspace(3) global ptr addrspace(1) poison

;; Base pointer is uniform, but also in VGPRs
define amdgpu_kernel void @global_store_saddr_uniform_ptr_in_vgprs(i32 %voffset, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_saddr_uniform_ptr_in_vgprs:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_load_dword s6, s[4:5], 0x24
; GFX-SDAG-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x34
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, 0
; GFX-SDAG-NEXT:    ds_read_b64 v[0:1], v0
; GFX-SDAG-NEXT:    s_waitcnt lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v2, s6
; GFX-SDAG-NEXT:    v_mov_b64_e32 v[6:7], s[2:3]
; GFX-SDAG-NEXT:    v_mov_b64_e32 v[4:5], s[0:1]
; GFX-SDAG-NEXT:    v_readfirstlane_b32 s0, v0
; GFX-SDAG-NEXT:    v_readfirstlane_b32 s1, v1
; GFX-SDAG-NEXT:    s_nop 4
; GFX-SDAG-NEXT:    global_store_dwordx4 v2, v[4:7], s[0:1]
; GFX-SDAG-NEXT:    s_endpgm
;
; GFX-ISEL-LABEL: global_store_saddr_uniform_ptr_in_vgprs:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_load_dword s6, s[4:5], 0x24
; GFX-ISEL-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x34
; GFX-ISEL-NEXT:    v_mov_b32_e32 v0, 0
; GFX-ISEL-NEXT:    ds_read_b64 v[0:1], v0
; GFX-ISEL-NEXT:    s_mov_b32 s7, 0
; GFX-ISEL-NEXT:    s_waitcnt lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[6:7]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v4, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v5, vcc, v1, v3, vcc
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[2:3]
; GFX-ISEL-NEXT:    global_store_dwordx4 v[4:5], v[0:3], off
; GFX-ISEL-NEXT:    s_endpgm
  %sbase = load ptr addrspace(1), ptr addrspace(3) @ptr.in.lds
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep0, <4 x i32> %data, metadata !0)
  ret void
}

;; Base pointer is uniform, but also in VGPRs, with imm offset
define amdgpu_kernel void @global_store_saddr_uniform_ptr_in_vgprs_immoffset(i32 %voffset, <4 x i32> %data) {
; GFX-SDAG-LABEL: global_store_saddr_uniform_ptr_in_vgprs_immoffset:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_load_dword s6, s[4:5], 0x24
; GFX-SDAG-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x34
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, 0
; GFX-SDAG-NEXT:    ds_read_b64 v[0:1], v0
; GFX-SDAG-NEXT:    s_waitcnt lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v2, s6
; GFX-SDAG-NEXT:    v_mov_b64_e32 v[6:7], s[2:3]
; GFX-SDAG-NEXT:    v_mov_b64_e32 v[4:5], s[0:1]
; GFX-SDAG-NEXT:    v_readfirstlane_b32 s0, v0
; GFX-SDAG-NEXT:    v_readfirstlane_b32 s1, v1
; GFX-SDAG-NEXT:    s_nop 4
; GFX-SDAG-NEXT:    global_store_dwordx4 v2, v[4:7], s[0:1] offset:-120 sc0
; GFX-SDAG-NEXT:    s_endpgm
;
; GFX-ISEL-LABEL: global_store_saddr_uniform_ptr_in_vgprs_immoffset:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_load_dword s6, s[4:5], 0x24
; GFX-ISEL-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x34
; GFX-ISEL-NEXT:    v_mov_b32_e32 v0, 0
; GFX-ISEL-NEXT:    ds_read_b64 v[0:1], v0
; GFX-ISEL-NEXT:    s_mov_b32 s7, 0
; GFX-ISEL-NEXT:    s_waitcnt lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[6:7]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v4, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v5, vcc, v1, v3, vcc
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[2:3]
; GFX-ISEL-NEXT:    global_store_dwordx4 v[4:5], v[0:3], off offset:-120 sc0
; GFX-ISEL-NEXT:    s_endpgm
  %sbase = load ptr addrspace(1), ptr addrspace(3) @ptr.in.lds
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -120
  call void @llvm.amdgcn.global.store.b128(ptr addrspace(1) %gep1, <4 x i32> %data, metadata !1)
  ret void
}

;;==============================================================================
;; } End saddr addressing modes
;;==============================================================================


!0 = !{!"wavefront"}
!1 = !{!"workgroup"}
!2 = !{!"agent"}
!3 = !{!""}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GFX9-4-GENERIC-ISEL: {{.*}}
; GFX9-4-GENERIC-SDAG: {{.*}}
; GFX942-ISEL: {{.*}}
; GFX942-SDAG: {{.*}}
; GFX950-ISEL: {{.*}}
; GFX950-SDAG: {{.*}}
