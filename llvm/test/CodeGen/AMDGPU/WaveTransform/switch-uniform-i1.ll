; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx90a -mattr=+wavefrontsize64 -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 < %s | FileCheck -check-prefixes=GFX90a %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1200 -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 < %s | FileCheck -check-prefixes=GFX1200 %s
; RUN: llc -global-isel=0 -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1200 -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 < %s | FileCheck -check-prefixes=GISEL %s

; __global__ void switch_uniform_i1(int *filter,  int *out, unsigned id) {
;  bool sel = false;
;  int x = filter[id];
;  switch (id) {
;  case 0:
;    sel |= x > 3;
;  case 1:
;    sel |= x > 5;
;  case 2:
;    sel |= x > 7;
;    break;
;  default:
;    sel |= x > 11;
;  }
;  if (sel)
;    out[id] = x;
; }

define amdgpu_kernel void @switch_uniform_i1(ptr addrspace(1) %filter.coerce, ptr addrspace(1) %out.coerce, i32 %id) {
  ; GFX90a-LABEL: name: switch_uniform_i1
  ; GFX90a: bb.0.entry:
  ; GFX90a-NEXT:   successors: %bb.1(0x80000000)
  ; GFX90a-NEXT:   liveins: $sgpr8_sgpr9
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[COPY:%[0-9]+]]:sgpr_64(p4) = COPY $sgpr8_sgpr9
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.1.NodeBlock6:
  ; GFX90a-NEXT:   successors: %bb.4(0x30000000), %bb.2(0x50000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]](p4), 0, 0 :: (dereferenceable invariant load (s128) from %ir.filter.coerce.kernarg.offset1, addrspace 4)
  ; GFX90a-NEXT:   [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]](p4), 16, 0 :: (dereferenceable invariant load (s32) from %ir.id.kernarg.offset, align 16, addrspace 4)
  ; GFX90a-NEXT:   [[COPY1:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub1
  ; GFX90a-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub0
  ; GFX90a-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY2]], %subreg.sub0, killed [[COPY1]], %subreg.sub1
  ; GFX90a-NEXT:   [[COPY3:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORD_IMM]]
  ; GFX90a-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX90a-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:sreg_64_xexec = REG_SEQUENCE [[S_LOAD_DWORD_IMM]], %subreg.sub0, killed [[S_MOV_B32_]], %subreg.sub1
  ; GFX90a-NEXT:   [[COPY4:%[0-9]+]]:sreg_64 = COPY [[REG_SEQUENCE1]]
  ; GFX90a-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX90a-NEXT:   [[S_LSHL_B64_:%[0-9]+]]:sreg_64 = nuw nsw S_LSHL_B64 [[REG_SEQUENCE1]], killed [[S_MOV_B32_1]], implicit-def dead $scc
  ; GFX90a-NEXT:   [[COPY5:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE]].sub0
  ; GFX90a-NEXT:   [[COPY6:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE]].sub1
  ; GFX90a-NEXT:   [[COPY7:%[0-9]+]]:sreg_32 = COPY [[S_LSHL_B64_]].sub0
  ; GFX90a-NEXT:   [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_LSHL_B64_]].sub1
  ; GFX90a-NEXT:   [[S_ADD_U32_:%[0-9]+]]:sreg_32 = S_ADD_U32 [[COPY5]], [[COPY7]], implicit-def $scc
  ; GFX90a-NEXT:   [[S_ADDC_U32_:%[0-9]+]]:sreg_32 = S_ADDC_U32 [[COPY6]], [[COPY8]], implicit-def $scc, implicit $scc
  ; GFX90a-NEXT:   [[REG_SEQUENCE2:%[0-9]+]]:sreg_64_xexec_xnull = REG_SEQUENCE [[S_ADD_U32_]], %subreg.sub0, [[S_ADDC_U32_]], %subreg.sub1
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX90a-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR killed [[REG_SEQUENCE2]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (load (s32) from %ir.arrayidx, addrspace 1)
  ; GFX90a-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX90a-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX90a-NEXT:   S_CMP_LT_I32 [[S_LOAD_DWORD_IMM]], killed [[S_MOV_B32_2]], implicit-def $scc
  ; GFX90a-NEXT:   [[S_CSELECT_B64_:%[0-9]+]]:sreg_64_xexec = S_CSELECT_B64 -1, 0, implicit $scc
  ; GFX90a-NEXT:   [[COPY9:%[0-9]+]]:sreg_64 = COPY [[S_CSELECT_B64_]]
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[COPY9]], %bb.4
  ; GFX90a-NEXT:   S_BRANCH %bb.2
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.2.NodeBlock:
  ; GFX90a-NEXT:   successors: %bb.6(0x40000000), %bb.3(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B64_:%[0-9]+]]:sreg_64 = S_MOV_B64 0
  ; GFX90a-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX90a-NEXT:   S_CMP_LT_I32 [[COPY3]], killed [[S_MOV_B32_3]], implicit-def $scc
  ; GFX90a-NEXT:   [[S_CSELECT_B64_1:%[0-9]+]]:sreg_64_xexec = S_CSELECT_B64 -1, 0, implicit $scc
  ; GFX90a-NEXT:   [[COPY10:%[0-9]+]]:sreg_64 = COPY [[S_CSELECT_B64_1]]
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[COPY10]], %bb.6
  ; GFX90a-NEXT:   S_BRANCH %bb.3
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.3.LeafBlock4:
  ; GFX90a-NEXT:   successors: %bb.7(0x40000000), %bb.8(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B64_1:%[0-9]+]]:sreg_64 = S_MOV_B64 0
  ; GFX90a-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX90a-NEXT:   S_CMP_EQ_U32 [[COPY3]], killed [[S_MOV_B32_4]], implicit-def $scc
  ; GFX90a-NEXT:   [[S_CSELECT_B64_2:%[0-9]+]]:sreg_64_xexec = S_CSELECT_B64 -1, 0, implicit $scc
  ; GFX90a-NEXT:   [[COPY11:%[0-9]+]]:sreg_64 = COPY [[S_CSELECT_B64_2]]
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[COPY11]], %bb.7
  ; GFX90a-NEXT:   S_BRANCH %bb.8
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.4.LeafBlock:
  ; GFX90a-NEXT:   successors: %bb.5(0x30000000), %bb.8(0x50000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX90a-NEXT:   S_CMP_LG_U32 [[COPY3]], killed [[S_MOV_B32_5]], implicit-def $scc
  ; GFX90a-NEXT:   [[S_CSELECT_B64_3:%[0-9]+]]:sreg_64_xexec = S_CSELECT_B64 -1, 0, implicit $scc
  ; GFX90a-NEXT:   [[COPY12:%[0-9]+]]:sreg_64 = COPY [[S_CSELECT_B64_3]]
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[COPY12]], %bb.8
  ; GFX90a-NEXT:   S_BRANCH %bb.5
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.5.sw.bb:
  ; GFX90a-NEXT:   successors: %bb.6(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GFX90a-NEXT:   [[V_CMP_GT_I32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_6]], implicit $exec
  ; GFX90a-NEXT:   [[COPY13:%[0-9]+]]:sreg_64 = COPY [[V_CMP_GT_I32_e64_]]
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.6.sw.bb4:
  ; GFX90a-NEXT:   successors: %bb.7(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[PHI:%[0-9]+]]:sreg_64 = PHI [[S_MOV_B64_]], %bb.2, [[COPY13]], %bb.5
  ; GFX90a-NEXT:   [[S_MOV_B32_7:%[0-9]+]]:sreg_32 = S_MOV_B32 5
  ; GFX90a-NEXT:   [[V_CMP_GT_I32_e64_1:%[0-9]+]]:sreg_64_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_7]], implicit $exec
  ; GFX90a-NEXT:   [[S_OR_B64_:%[0-9]+]]:sreg_64 = S_OR_B64 killed [[V_CMP_GT_I32_e64_1]], [[PHI]], implicit-def dead $scc
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.7.sw.bb12:
  ; GFX90a-NEXT:   successors: %bb.9(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[PHI1:%[0-9]+]]:sreg_64 = PHI [[S_MOV_B64_1]], %bb.3, [[S_OR_B64_]], %bb.6
  ; GFX90a-NEXT:   [[S_MOV_B32_8:%[0-9]+]]:sreg_32 = S_MOV_B32 7
  ; GFX90a-NEXT:   [[V_CMP_GT_I32_e64_2:%[0-9]+]]:sreg_64_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_8]], implicit $exec
  ; GFX90a-NEXT:   [[S_OR_B64_1:%[0-9]+]]:sreg_64 = S_OR_B64 killed [[V_CMP_GT_I32_e64_2]], [[PHI1]], implicit-def dead $scc
  ; GFX90a-NEXT:   S_BRANCH %bb.9
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.8.sw.default:
  ; GFX90a-NEXT:   successors: %bb.9(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_9:%[0-9]+]]:sreg_32 = S_MOV_B32 11
  ; GFX90a-NEXT:   [[V_CMP_GT_I32_e64_3:%[0-9]+]]:sreg_64_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_9]], implicit $exec
  ; GFX90a-NEXT:   [[COPY14:%[0-9]+]]:sreg_64 = COPY [[V_CMP_GT_I32_e64_3]]
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.9.sw.epilog:
  ; GFX90a-NEXT:   successors: %bb.10(0x40000000), %bb.11(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[PHI2:%[0-9]+]]:sreg_64_xexec = PHI [[COPY14]], %bb.8, [[S_OR_B64_1]], %bb.7
  ; GFX90a-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, [[PHI2]], implicit $exec
  ; GFX90a-NEXT:   [[S_MOV_B32_10:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX90a-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX90a-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_NE_U32_e64 [[V_CNDMASK_B32_e64_]], killed [[S_MOV_B32_10]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_NE_U32_e64_]], %bb.11
  ; GFX90a-NEXT:   S_BRANCH %bb.10
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.10.if.then:
  ; GFX90a-NEXT:   successors: %bb.11(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[COPY15:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub3
  ; GFX90a-NEXT:   [[COPY16:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub2
  ; GFX90a-NEXT:   [[REG_SEQUENCE3:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY16]], %subreg.sub0, killed [[COPY15]], %subreg.sub1
  ; GFX90a-NEXT:   [[S_MOV_B32_11:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX90a-NEXT:   [[S_LSHL_B64_1:%[0-9]+]]:sreg_64 = nuw nsw S_LSHL_B64 [[COPY4]], killed [[S_MOV_B32_11]], implicit-def dead $scc
  ; GFX90a-NEXT:   [[COPY17:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE3]].sub0
  ; GFX90a-NEXT:   [[COPY18:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE3]].sub1
  ; GFX90a-NEXT:   [[COPY19:%[0-9]+]]:sreg_32 = COPY [[S_LSHL_B64_1]].sub0
  ; GFX90a-NEXT:   [[COPY20:%[0-9]+]]:sreg_32 = COPY [[S_LSHL_B64_1]].sub1
  ; GFX90a-NEXT:   [[S_ADD_U32_1:%[0-9]+]]:sreg_32 = S_ADD_U32 [[COPY17]], [[COPY19]], implicit-def $scc
  ; GFX90a-NEXT:   [[S_ADDC_U32_1:%[0-9]+]]:sreg_32 = S_ADDC_U32 [[COPY18]], [[COPY20]], implicit-def $scc, implicit $scc
  ; GFX90a-NEXT:   [[REG_SEQUENCE4:%[0-9]+]]:sreg_64_xexec_xnull = REG_SEQUENCE [[S_ADD_U32_1]], %subreg.sub0, [[S_ADDC_U32_1]], %subreg.sub1
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_1:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX90a-NEXT:   [[COPY21:%[0-9]+]]:vgpr_32 = COPY [[GLOBAL_LOAD_DWORD_SADDR]]
  ; GFX90a-NEXT:   GLOBAL_STORE_DWORD_SADDR killed [[V_MOV_B32_e32_1]], [[COPY21]], killed [[REG_SEQUENCE4]], 0, 0, implicit $exec :: (store (s32) into %ir.arrayidx29, addrspace 1)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.11.if.end:
  ; GFX90a-NEXT:   S_ENDPGM 0
  ;
  ; GFX1200-LABEL: name: switch_uniform_i1
  ; GFX1200: bb.0.entry:
  ; GFX1200-NEXT:   successors: %bb.1(0x80000000)
  ; GFX1200-NEXT:   liveins: $sgpr4_sgpr5
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[COPY:%[0-9]+]]:sgpr_64(p4) = COPY $sgpr4_sgpr5
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.1.NodeBlock6:
  ; GFX1200-NEXT:   successors: %bb.4(0x30000000), %bb.2(0x50000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]](p4), 0, 0 :: (dereferenceable invariant load (s128) from %ir.filter.coerce.kernarg.offset1, addrspace 4)
  ; GFX1200-NEXT:   [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]](p4), 16, 0 :: (dereferenceable invariant load (s32) from %ir.id.kernarg.offset, align 16, addrspace 4)
  ; GFX1200-NEXT:   [[COPY1:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub1
  ; GFX1200-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub0
  ; GFX1200-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY2]], %subreg.sub0, killed [[COPY1]], %subreg.sub1
  ; GFX1200-NEXT:   [[COPY3:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORD_IMM]]
  ; GFX1200-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:sreg_64_xexec = REG_SEQUENCE [[S_LOAD_DWORD_IMM]], %subreg.sub0, killed [[S_MOV_B32_]], %subreg.sub1
  ; GFX1200-NEXT:   [[COPY4:%[0-9]+]]:sreg_64 = COPY [[REG_SEQUENCE1]]
  ; GFX1200-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   [[S_LSHL_B64_:%[0-9]+]]:sreg_64 = nuw nsw S_LSHL_B64 [[REG_SEQUENCE1]], killed [[S_MOV_B32_1]], implicit-def dead $scc
  ; GFX1200-NEXT:   [[S_ADD_U64_:%[0-9]+]]:sreg_64_xexec_xnull = S_ADD_U64 killed [[REG_SEQUENCE]], killed [[S_LSHL_B64_]]
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX1200-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR killed [[S_ADD_U64_]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (load (s32) from %ir.arrayidx, addrspace 1)
  ; GFX1200-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX1200-NEXT:   S_CMP_LT_I32 [[S_LOAD_DWORD_IMM]], killed [[S_MOV_B32_2]], implicit-def $scc
  ; GFX1200-NEXT:   [[S_CSELECT_B32_:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GFX1200-NEXT:   [[COPY5:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_]]
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[COPY5]], %bb.4
  ; GFX1200-NEXT:   S_BRANCH %bb.2
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.2.NodeBlock:
  ; GFX1200-NEXT:   successors: %bb.6(0x40000000), %bb.3(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   S_CMP_LT_I32 [[COPY3]], killed [[S_MOV_B32_4]], implicit-def $scc
  ; GFX1200-NEXT:   [[S_CSELECT_B32_1:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GFX1200-NEXT:   [[COPY6:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_1]]
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[COPY6]], %bb.6
  ; GFX1200-NEXT:   S_BRANCH %bb.3
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.3.LeafBlock4:
  ; GFX1200-NEXT:   successors: %bb.7(0x40000000), %bb.8(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   S_CMP_EQ_U32 [[COPY3]], killed [[S_MOV_B32_6]], implicit-def $scc
  ; GFX1200-NEXT:   [[S_CSELECT_B32_2:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GFX1200-NEXT:   [[COPY7:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_2]]
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[COPY7]], %bb.7
  ; GFX1200-NEXT:   S_BRANCH %bb.8
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.4.LeafBlock:
  ; GFX1200-NEXT:   successors: %bb.5(0x30000000), %bb.8(0x50000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_7:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   S_CMP_LG_U32 [[COPY3]], killed [[S_MOV_B32_7]], implicit-def $scc
  ; GFX1200-NEXT:   [[S_CSELECT_B32_3:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GFX1200-NEXT:   [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_3]]
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[COPY8]], %bb.8
  ; GFX1200-NEXT:   S_BRANCH %bb.5
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.5.sw.bb:
  ; GFX1200-NEXT:   successors: %bb.6(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_8:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GFX1200-NEXT:   [[V_CMP_GT_I32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_8]], implicit $exec
  ; GFX1200-NEXT:   [[COPY9:%[0-9]+]]:sreg_32 = COPY [[V_CMP_GT_I32_e64_]]
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.6.sw.bb4:
  ; GFX1200-NEXT:   successors: %bb.7(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[PHI:%[0-9]+]]:sreg_32 = PHI [[S_MOV_B32_3]], %bb.2, [[COPY9]], %bb.5
  ; GFX1200-NEXT:   [[S_MOV_B32_9:%[0-9]+]]:sreg_32 = S_MOV_B32 5
  ; GFX1200-NEXT:   [[V_CMP_GT_I32_e64_1:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_9]], implicit $exec
  ; GFX1200-NEXT:   [[S_OR_B32_:%[0-9]+]]:sreg_32 = S_OR_B32 killed [[V_CMP_GT_I32_e64_1]], [[PHI]], implicit-def dead $scc
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.7.sw.bb12:
  ; GFX1200-NEXT:   successors: %bb.9(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[PHI1:%[0-9]+]]:sreg_32 = PHI [[S_MOV_B32_5]], %bb.3, [[S_OR_B32_]], %bb.6
  ; GFX1200-NEXT:   [[S_MOV_B32_10:%[0-9]+]]:sreg_32 = S_MOV_B32 7
  ; GFX1200-NEXT:   [[V_CMP_GT_I32_e64_2:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_10]], implicit $exec
  ; GFX1200-NEXT:   [[S_OR_B32_1:%[0-9]+]]:sreg_32 = S_OR_B32 killed [[V_CMP_GT_I32_e64_2]], [[PHI1]], implicit-def dead $scc
  ; GFX1200-NEXT:   S_BRANCH %bb.9
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.8.sw.default:
  ; GFX1200-NEXT:   successors: %bb.9(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_11:%[0-9]+]]:sreg_32 = S_MOV_B32 11
  ; GFX1200-NEXT:   [[V_CMP_GT_I32_e64_3:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_11]], implicit $exec
  ; GFX1200-NEXT:   [[COPY10:%[0-9]+]]:sreg_32 = COPY [[V_CMP_GT_I32_e64_3]]
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.9.sw.epilog:
  ; GFX1200-NEXT:   successors: %bb.10(0x40000000), %bb.11(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[PHI2:%[0-9]+]]:sreg_32_xm0_xexec = PHI [[COPY10]], %bb.8, [[S_OR_B32_1]], %bb.7
  ; GFX1200-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, [[PHI2]], implicit $exec
  ; GFX1200-NEXT:   [[S_MOV_B32_12:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX1200-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_NE_U32_e64 [[V_CNDMASK_B32_e64_]], killed [[S_MOV_B32_12]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_NE_U32_e64_]], %bb.11
  ; GFX1200-NEXT:   S_BRANCH %bb.10
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.10.if.then:
  ; GFX1200-NEXT:   successors: %bb.11(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[COPY11:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub3
  ; GFX1200-NEXT:   [[COPY12:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub2
  ; GFX1200-NEXT:   [[REG_SEQUENCE2:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY12]], %subreg.sub0, killed [[COPY11]], %subreg.sub1
  ; GFX1200-NEXT:   [[S_MOV_B32_13:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   [[S_LSHL_B64_1:%[0-9]+]]:sreg_64 = nuw nsw S_LSHL_B64 [[COPY4]], killed [[S_MOV_B32_13]], implicit-def dead $scc
  ; GFX1200-NEXT:   [[S_ADD_U64_1:%[0-9]+]]:sreg_64_xexec_xnull = S_ADD_U64 killed [[REG_SEQUENCE2]], killed [[S_LSHL_B64_1]]
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_1:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX1200-NEXT:   [[COPY13:%[0-9]+]]:vgpr_32 = COPY [[GLOBAL_LOAD_DWORD_SADDR]]
  ; GFX1200-NEXT:   GLOBAL_STORE_DWORD_SADDR killed [[V_MOV_B32_e32_1]], [[COPY13]], killed [[S_ADD_U64_1]], 0, 0, implicit $exec :: (store (s32) into %ir.arrayidx29, addrspace 1)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.11.if.end:
  ; GFX1200-NEXT:   S_ENDPGM 0
  ;
  ; GISEL-LABEL: name: switch_uniform_i1
  ; GISEL: bb.0.entry:
  ; GISEL-NEXT:   successors: %bb.1(0x80000000)
  ; GISEL-NEXT:   liveins: $sgpr4_sgpr5
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[COPY:%[0-9]+]]:sgpr_64(p4) = COPY $sgpr4_sgpr5
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.1.NodeBlock6:
  ; GISEL-NEXT:   successors: %bb.4(0x30000000), %bb.2(0x50000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]](p4), 0, 0 :: (dereferenceable invariant load (s128) from %ir.filter.coerce.kernarg.offset1, addrspace 4)
  ; GISEL-NEXT:   [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]](p4), 16, 0 :: (dereferenceable invariant load (s32) from %ir.id.kernarg.offset, align 16, addrspace 4)
  ; GISEL-NEXT:   [[COPY1:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub1
  ; GISEL-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub0
  ; GISEL-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY2]], %subreg.sub0, killed [[COPY1]], %subreg.sub1
  ; GISEL-NEXT:   [[COPY3:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORD_IMM]]
  ; GISEL-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GISEL-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:sreg_64_xexec = REG_SEQUENCE [[S_LOAD_DWORD_IMM]], %subreg.sub0, killed [[S_MOV_B32_]], %subreg.sub1
  ; GISEL-NEXT:   [[COPY4:%[0-9]+]]:sreg_64 = COPY [[REG_SEQUENCE1]]
  ; GISEL-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GISEL-NEXT:   [[S_LSHL_B64_:%[0-9]+]]:sreg_64 = nuw nsw S_LSHL_B64 [[REG_SEQUENCE1]], killed [[S_MOV_B32_1]], implicit-def dead $scc
  ; GISEL-NEXT:   [[S_ADD_U64_:%[0-9]+]]:sreg_64_xexec_xnull = S_ADD_U64 killed [[REG_SEQUENCE]], killed [[S_LSHL_B64_]]
  ; GISEL-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GISEL-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR killed [[S_ADD_U64_]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (load (s32) from %ir.arrayidx, addrspace 1)
  ; GISEL-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GISEL-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GISEL-NEXT:   S_CMP_LT_I32 [[S_LOAD_DWORD_IMM]], killed [[S_MOV_B32_2]], implicit-def $scc
  ; GISEL-NEXT:   [[S_CSELECT_B32_:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GISEL-NEXT:   [[COPY5:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_]]
  ; GISEL-NEXT:   SI_BRCOND_UNIFORM killed [[COPY5]], %bb.4
  ; GISEL-NEXT:   S_BRANCH %bb.2
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.2.NodeBlock:
  ; GISEL-NEXT:   successors: %bb.6(0x40000000), %bb.3(0x40000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GISEL-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GISEL-NEXT:   S_CMP_LT_I32 [[COPY3]], killed [[S_MOV_B32_4]], implicit-def $scc
  ; GISEL-NEXT:   [[S_CSELECT_B32_1:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GISEL-NEXT:   [[COPY6:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_1]]
  ; GISEL-NEXT:   SI_BRCOND_UNIFORM killed [[COPY6]], %bb.6
  ; GISEL-NEXT:   S_BRANCH %bb.3
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.3.LeafBlock4:
  ; GISEL-NEXT:   successors: %bb.7(0x40000000), %bb.8(0x40000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GISEL-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GISEL-NEXT:   S_CMP_EQ_U32 [[COPY3]], killed [[S_MOV_B32_6]], implicit-def $scc
  ; GISEL-NEXT:   [[S_CSELECT_B32_2:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GISEL-NEXT:   [[COPY7:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_2]]
  ; GISEL-NEXT:   SI_BRCOND_UNIFORM killed [[COPY7]], %bb.7
  ; GISEL-NEXT:   S_BRANCH %bb.8
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.4.LeafBlock:
  ; GISEL-NEXT:   successors: %bb.5(0x30000000), %bb.8(0x50000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[S_MOV_B32_7:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GISEL-NEXT:   S_CMP_LG_U32 [[COPY3]], killed [[S_MOV_B32_7]], implicit-def $scc
  ; GISEL-NEXT:   [[S_CSELECT_B32_3:%[0-9]+]]:sreg_32_xm0_xexec = S_CSELECT_B32 -1, 0, implicit $scc
  ; GISEL-NEXT:   [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_CSELECT_B32_3]]
  ; GISEL-NEXT:   SI_BRCOND_UNIFORM killed [[COPY8]], %bb.8
  ; GISEL-NEXT:   S_BRANCH %bb.5
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.5.sw.bb:
  ; GISEL-NEXT:   successors: %bb.6(0x80000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[S_MOV_B32_8:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GISEL-NEXT:   [[V_CMP_GT_I32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_8]], implicit $exec
  ; GISEL-NEXT:   [[COPY9:%[0-9]+]]:sreg_32 = COPY [[V_CMP_GT_I32_e64_]]
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.6.sw.bb4:
  ; GISEL-NEXT:   successors: %bb.7(0x80000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[PHI:%[0-9]+]]:sreg_32 = PHI [[S_MOV_B32_3]], %bb.2, [[COPY9]], %bb.5
  ; GISEL-NEXT:   [[S_MOV_B32_9:%[0-9]+]]:sreg_32 = S_MOV_B32 5
  ; GISEL-NEXT:   [[V_CMP_GT_I32_e64_1:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_9]], implicit $exec
  ; GISEL-NEXT:   [[S_OR_B32_:%[0-9]+]]:sreg_32 = S_OR_B32 killed [[V_CMP_GT_I32_e64_1]], [[PHI]], implicit-def dead $scc
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.7.sw.bb12:
  ; GISEL-NEXT:   successors: %bb.9(0x80000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[PHI1:%[0-9]+]]:sreg_32 = PHI [[S_MOV_B32_5]], %bb.3, [[S_OR_B32_]], %bb.6
  ; GISEL-NEXT:   [[S_MOV_B32_10:%[0-9]+]]:sreg_32 = S_MOV_B32 7
  ; GISEL-NEXT:   [[V_CMP_GT_I32_e64_2:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_10]], implicit $exec
  ; GISEL-NEXT:   [[S_OR_B32_1:%[0-9]+]]:sreg_32 = S_OR_B32 killed [[V_CMP_GT_I32_e64_2]], [[PHI1]], implicit-def dead $scc
  ; GISEL-NEXT:   S_BRANCH %bb.9
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.8.sw.default:
  ; GISEL-NEXT:   successors: %bb.9(0x80000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[S_MOV_B32_11:%[0-9]+]]:sreg_32 = S_MOV_B32 11
  ; GISEL-NEXT:   [[V_CMP_GT_I32_e64_3:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_11]], implicit $exec
  ; GISEL-NEXT:   [[COPY10:%[0-9]+]]:sreg_32 = COPY [[V_CMP_GT_I32_e64_3]]
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.9.sw.epilog:
  ; GISEL-NEXT:   successors: %bb.10(0x40000000), %bb.11(0x40000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[PHI2:%[0-9]+]]:sreg_32_xm0_xexec = PHI [[COPY10]], %bb.8, [[S_OR_B32_1]], %bb.7
  ; GISEL-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, [[PHI2]], implicit $exec
  ; GISEL-NEXT:   [[S_MOV_B32_12:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GISEL-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GISEL-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_NE_U32_e64 [[V_CNDMASK_B32_e64_]], killed [[S_MOV_B32_12]], implicit $exec
  ; GISEL-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_NE_U32_e64_]], %bb.11
  ; GISEL-NEXT:   S_BRANCH %bb.10
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.10.if.then:
  ; GISEL-NEXT:   successors: %bb.11(0x80000000)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT:   [[COPY11:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub3
  ; GISEL-NEXT:   [[COPY12:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub2
  ; GISEL-NEXT:   [[REG_SEQUENCE2:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY12]], %subreg.sub0, killed [[COPY11]], %subreg.sub1
  ; GISEL-NEXT:   [[S_MOV_B32_13:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GISEL-NEXT:   [[S_LSHL_B64_1:%[0-9]+]]:sreg_64 = nuw nsw S_LSHL_B64 [[COPY4]], killed [[S_MOV_B32_13]], implicit-def dead $scc
  ; GISEL-NEXT:   [[S_ADD_U64_1:%[0-9]+]]:sreg_64_xexec_xnull = S_ADD_U64 killed [[REG_SEQUENCE2]], killed [[S_LSHL_B64_1]]
  ; GISEL-NEXT:   [[V_MOV_B32_e32_1:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GISEL-NEXT:   [[COPY13:%[0-9]+]]:vgpr_32 = COPY [[GLOBAL_LOAD_DWORD_SADDR]]
  ; GISEL-NEXT:   GLOBAL_STORE_DWORD_SADDR killed [[V_MOV_B32_e32_1]], [[COPY13]], killed [[S_ADD_U64_1]], 0, 0, implicit $exec :: (store (s32) into %ir.arrayidx29, addrspace 1)
  ; GISEL-NEXT: {{  $}}
  ; GISEL-NEXT: bb.11.if.end:
  ; GISEL-NEXT:   S_ENDPGM 0
entry:
  %idxprom = zext i32 %id to i64
  %arrayidx = getelementptr inbounds nuw i32, ptr addrspace(1) %filter.coerce, i64 %idxprom
  %load = load i32, ptr addrspace(1) %arrayidx, align 4
  switch i32 %id, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb4
    i32 2, label %sw.bb12
  ]

sw.bb:                                            ; preds = %entry
  %cmp = icmp sgt i32 %load, 3
  br label %sw.bb4

sw.bb4:                                           ; preds = %entry, %sw.bb
  %sel.0.off0 = phi i1 [ false, %entry ], [ %cmp, %sw.bb ]
  %cmp5 = icmp sgt i32 %load, 5
  %or9 = or i1 %cmp5, %sel.0.off0
  br label %sw.bb12

sw.bb12:                                          ; preds = %entry, %sw.bb4
  %sel.1.off0 = phi i1 [ false, %entry ], [ %or9, %sw.bb4 ]
  %cmp13 = icmp sgt i32 %load, 7
  %or17 = or i1 %cmp13, %sel.1.off0
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %cmp20 = icmp sgt i32 %load, 11
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb12
  %sel.2.off0 = phi i1 [ %cmp20, %sw.default ], [ %or17, %sw.bb12 ]
  br i1 %sel.2.off0, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  %arrayidx29 = getelementptr inbounds nuw i32, ptr addrspace(1) %out.coerce, i64 %idxprom
  store i32 %load, ptr addrspace(1) %arrayidx29, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  ret void
}
