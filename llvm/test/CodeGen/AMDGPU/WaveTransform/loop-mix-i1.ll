; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx940 -mattr=+wavefrontsize64 -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 < %s | FileCheck -check-prefixes=GFX940 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1200 -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 < %s | FileCheck -check-prefixes=GFX1200 %s

; Mixing uniform and divergent control-flow
; Mixing unifrom-i1 with divergent-i1
; __global__ void loop_mix_i1(int *filter,  int *out) {
;   int id = __builtin_amdgcn_workitem_id_x();
;   bool sel = false;
;   if (id > 5) {
;     int i = 0;
;     int x;
;     do {
;       x = filter[i];
;       sel = sel ^ (x < 7);
;       i += 16;
;     } while (x > 11);
;   } else
;     sel = (filter[id] > 2);
;   if (sel)
;     out[id] = id;
; }
define amdgpu_kernel void @loop_mix_i1(ptr addrspace(1) %filter.coerce, ptr addrspace(1) %out.coerce) {
  ; GFX940-LABEL: name: loop_mix_i1
  ; GFX940: bb.0.entry:
  ; GFX940-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; GFX940-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT:   [[COPY:%[0-9]+]]:sgpr_64(p4) = COPY $sgpr4_sgpr5
  ; GFX940-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr0
  ; GFX940-NEXT:   [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]](p4), 0, 0 :: (dereferenceable invariant load (s128) from %ir.filter.coerce.kernarg.offset1, addrspace 4)
  ; GFX940-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub1
  ; GFX940-NEXT:   [[COPY3:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub0
  ; GFX940-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY3]], %subreg.sub0, killed [[COPY2]], %subreg.sub1
  ; GFX940-NEXT:   [[COPY4:%[0-9]+]]:sreg_64_xexec_xnull = COPY [[REG_SEQUENCE]]
  ; GFX940-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1023
  ; GFX940-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 [[COPY1]](s32), killed [[S_MOV_B32_]], implicit $exec
  ; GFX940-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX940-NEXT:   [[V_CMP_LT_U32_e64_:%[0-9]+]]:sreg_64 = V_CMP_LT_U32_e64 [[V_AND_B32_e64_]], killed [[S_MOV_B32_1]], implicit $exec
  ; GFX940-NEXT:   SI_BRCOND killed [[V_CMP_LT_U32_e64_]], %bb.3
  ; GFX940-NEXT:   S_BRANCH %bb.1
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT: bb.1.do.body.preheader:
  ; GFX940-NEXT:   successors: %bb.2(0x80000000)
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT:   [[S_MOV_B64_:%[0-9]+]]:sreg_64 = S_MOV_B64 0
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT: bb.2.do.body:
  ; GFX940-NEXT:   successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT:   [[PHI:%[0-9]+]]:sreg_64_xexec_xnull = PHI [[COPY4]], %bb.1, %6, %bb.2
  ; GFX940-NEXT:   [[PHI1:%[0-9]+]]:sreg_64 = PHI [[S_MOV_B64_]], %bb.1, %5, %bb.2
  ; GFX940-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX940-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR [[PHI]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (load (s32) from %ir.lsr.iv, addrspace 1)
  ; GFX940-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 7
  ; GFX940-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX940-NEXT:   [[V_CMP_LT_I32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_LT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX940-NEXT:   [[S_XOR_B64_:%[0-9]+]]:sreg_64_xexec = S_XOR_B64 [[PHI1]], killed [[V_CMP_LT_I32_e64_]], implicit-def dead $scc
  ; GFX940-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 11
  ; GFX940-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX940-NEXT:   [[V_CMP_GT_I32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX940-NEXT:   [[S_MOV_B64_1:%[0-9]+]]:sreg_64 = S_MOV_B64 64
  ; GFX940-NEXT:   [[COPY5:%[0-9]+]]:sreg_32 = COPY [[PHI]].sub0
  ; GFX940-NEXT:   [[COPY6:%[0-9]+]]:sreg_32 = COPY [[PHI]].sub1
  ; GFX940-NEXT:   [[COPY7:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B64_1]].sub0
  ; GFX940-NEXT:   [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B64_1]].sub1
  ; GFX940-NEXT:   [[S_ADD_U32_:%[0-9]+]]:sreg_32 = S_ADD_U32 [[COPY5]], [[COPY7]], implicit-def $scc
  ; GFX940-NEXT:   [[S_ADDC_U32_:%[0-9]+]]:sreg_32 = S_ADDC_U32 [[COPY6]], [[COPY8]], implicit-def $scc, implicit $scc
  ; GFX940-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[S_ADD_U32_]], %subreg.sub0, [[S_ADDC_U32_]], %subreg.sub1
  ; GFX940-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, -1, [[S_XOR_B64_]], implicit $exec
  ; GFX940-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_GT_I32_e64_]], %bb.2
  ; GFX940-NEXT:   S_BRANCH %bb.4
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT: bb.3.if.else:
  ; GFX940-NEXT:   successors: %bb.4(0x80000000)
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX940-NEXT:   [[V_LSHLREV_B32_e64_:%[0-9]+]]:vgpr_32 = nuw nsw V_LSHLREV_B32_e64 [[S_MOV_B32_4]], [[V_AND_B32_e64_]], implicit $exec
  ; GFX940-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR1:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR [[COPY4]], killed [[V_LSHLREV_B32_e64_]], 0, 0, implicit $exec :: (load (s32) from %ir.arrayidx7, addrspace 1)
  ; GFX940-NEXT:   [[V_CMP_GT_I32_e64_1:%[0-9]+]]:sreg_64_xexec = V_CMP_GT_I32_e64 killed [[GLOBAL_LOAD_DWORD_SADDR1]], [[S_MOV_B32_4]], implicit $exec
  ; GFX940-NEXT:   [[V_CNDMASK_B32_e64_1:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, -1, [[V_CMP_GT_I32_e64_1]], implicit $exec
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT: bb.4.if.end:
  ; GFX940-NEXT:   successors: %bb.5(0x40000000), %bb.6(0x40000000)
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT:   [[PHI2:%[0-9]+]]:vgpr_32 = PHI [[V_CNDMASK_B32_e64_1]], %bb.3, [[V_CNDMASK_B32_e64_]], %bb.2
  ; GFX940-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_NE_U32_e64 [[PHI2]], 0, implicit $exec
  ; GFX940-NEXT:   [[V_CNDMASK_B32_e64_2:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, [[V_CMP_NE_U32_e64_]], implicit $exec
  ; GFX940-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX940-NEXT:   [[V_CMP_NE_U32_e64_1:%[0-9]+]]:sreg_64 = V_CMP_NE_U32_e64 killed [[V_CNDMASK_B32_e64_2]], killed [[S_MOV_B32_5]], implicit $exec
  ; GFX940-NEXT:   SI_BRCOND killed [[V_CMP_NE_U32_e64_1]], %bb.6
  ; GFX940-NEXT:   S_BRANCH %bb.5
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT: bb.5.if.then11:
  ; GFX940-NEXT:   successors: %bb.6(0x80000000)
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT:   [[COPY9:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub3
  ; GFX940-NEXT:   [[COPY10:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub2
  ; GFX940-NEXT:   [[REG_SEQUENCE2:%[0-9]+]]:sreg_64_xexec_xnull = REG_SEQUENCE killed [[COPY10]], %subreg.sub0, killed [[COPY9]], %subreg.sub1
  ; GFX940-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX940-NEXT:   [[V_LSHLREV_B32_e64_1:%[0-9]+]]:vgpr_32 = nuw nsw V_LSHLREV_B32_e64 killed [[S_MOV_B32_6]], [[V_AND_B32_e64_]], implicit $exec
  ; GFX940-NEXT:   GLOBAL_STORE_DWORD_SADDR killed [[V_LSHLREV_B32_e64_1]], [[V_AND_B32_e64_]], killed [[REG_SEQUENCE2]], 0, 0, implicit $exec :: (store (s32) into %ir.arrayidx13, addrspace 1)
  ; GFX940-NEXT: {{  $}}
  ; GFX940-NEXT: bb.6.if.end14:
  ; GFX940-NEXT:   S_ENDPGM 0
  ;
  ; GFX1200-LABEL: name: loop_mix_i1
  ; GFX1200: bb.0.entry:
  ; GFX1200-NEXT:   successors: %bb.1(0x40000000), %bb.3(0x40000000)
  ; GFX1200-NEXT:   liveins: $vgpr0, $sgpr4_sgpr5
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[COPY:%[0-9]+]]:sgpr_64(p4) = COPY $sgpr4_sgpr5
  ; GFX1200-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr0
  ; GFX1200-NEXT:   [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]](p4), 0, 0 :: (dereferenceable invariant load (s128) from %ir.filter.coerce.kernarg.offset1, addrspace 4)
  ; GFX1200-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub1
  ; GFX1200-NEXT:   [[COPY3:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub0
  ; GFX1200-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[COPY3]], %subreg.sub0, killed [[COPY2]], %subreg.sub1
  ; GFX1200-NEXT:   [[COPY4:%[0-9]+]]:sreg_64_xexec_xnull = COPY [[REG_SEQUENCE]]
  ; GFX1200-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1023
  ; GFX1200-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 [[COPY1]](s32), killed [[S_MOV_B32_]], implicit $exec
  ; GFX1200-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX1200-NEXT:   [[V_CMP_LT_U32_e64_:%[0-9]+]]:sreg_32 = V_CMP_LT_U32_e64 [[V_AND_B32_e64_]], killed [[S_MOV_B32_1]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_LT_U32_e64_]], %bb.3
  ; GFX1200-NEXT:   S_BRANCH %bb.1
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.1.do.body.preheader:
  ; GFX1200-NEXT:   successors: %bb.2(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.2.do.body:
  ; GFX1200-NEXT:   successors: %bb.2(0x7c000000), %bb.4(0x04000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[PHI:%[0-9]+]]:sreg_64_xexec_xnull = PHI [[COPY4]], %bb.1, %6, %bb.2
  ; GFX1200-NEXT:   [[PHI1:%[0-9]+]]:sreg_32 = PHI [[S_MOV_B32_2]], %bb.1, %5, %bb.2
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX1200-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR [[PHI]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (load (s32) from %ir.lsr.iv, addrspace 1)
  ; GFX1200-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 7
  ; GFX1200-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[V_CMP_LT_I32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_LT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX1200-NEXT:   [[S_XOR_B32_:%[0-9]+]]:sreg_32_xm0_xexec = S_XOR_B32 [[PHI1]], killed [[V_CMP_LT_I32_e64_]], implicit-def dead $scc
  ; GFX1200-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 11
  ; GFX1200-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[V_CMP_GT_I32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 [[GLOBAL_LOAD_DWORD_SADDR]], killed [[S_MOV_B32_4]], implicit $exec
  ; GFX1200-NEXT:   [[S_MOV_B64_:%[0-9]+]]:sreg_64 = S_MOV_B64 64
  ; GFX1200-NEXT:   [[S_ADD_U64_:%[0-9]+]]:sreg_64 = S_ADD_U64 [[PHI]], killed [[S_MOV_B64_]]
  ; GFX1200-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, -1, [[S_XOR_B32_]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_GT_I32_e64_]], %bb.2
  ; GFX1200-NEXT:   S_BRANCH %bb.4
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.3.if.else:
  ; GFX1200-NEXT:   successors: %bb.4(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   [[V_LSHLREV_B32_e64_:%[0-9]+]]:vgpr_32 = nuw nsw V_LSHLREV_B32_e64 [[S_MOV_B32_5]], [[V_AND_B32_e64_]], implicit $exec
  ; GFX1200-NEXT:   [[GLOBAL_LOAD_DWORD_SADDR1:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD_SADDR [[COPY4]], killed [[V_LSHLREV_B32_e64_]], 0, 0, implicit $exec :: (load (s32) from %ir.arrayidx7, addrspace 1)
  ; GFX1200-NEXT:   [[V_CMP_GT_I32_e64_1:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_GT_I32_e64 killed [[GLOBAL_LOAD_DWORD_SADDR1]], [[S_MOV_B32_5]], implicit $exec
  ; GFX1200-NEXT:   [[V_CNDMASK_B32_e64_1:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, -1, [[V_CMP_GT_I32_e64_1]], implicit $exec
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.4.if.end:
  ; GFX1200-NEXT:   successors: %bb.5(0x40000000), %bb.6(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[PHI2:%[0-9]+]]:vgpr_32 = PHI [[V_CNDMASK_B32_e64_1]], %bb.3, [[V_CNDMASK_B32_e64_]], %bb.2
  ; GFX1200-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_NE_U32_e64 [[PHI2]], 0, implicit $exec
  ; GFX1200-NEXT:   [[V_CNDMASK_B32_e64_2:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, [[V_CMP_NE_U32_e64_]], implicit $exec
  ; GFX1200-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX1200-NEXT:   [[V_CMP_NE_U32_e64_1:%[0-9]+]]:sreg_32 = V_CMP_NE_U32_e64 killed [[V_CNDMASK_B32_e64_2]], killed [[S_MOV_B32_6]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_NE_U32_e64_1]], %bb.6
  ; GFX1200-NEXT:   S_BRANCH %bb.5
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.5.if.then11:
  ; GFX1200-NEXT:   successors: %bb.6(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[COPY5:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub3
  ; GFX1200-NEXT:   [[COPY6:%[0-9]+]]:sreg_32 = COPY [[S_LOAD_DWORDX4_IMM]].sub2
  ; GFX1200-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:sreg_64_xexec_xnull = REG_SEQUENCE killed [[COPY6]], %subreg.sub0, killed [[COPY5]], %subreg.sub1
  ; GFX1200-NEXT:   [[S_MOV_B32_7:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   [[V_LSHLREV_B32_e64_1:%[0-9]+]]:vgpr_32 = nuw nsw V_LSHLREV_B32_e64 killed [[S_MOV_B32_7]], [[V_AND_B32_e64_]], implicit $exec
  ; GFX1200-NEXT:   GLOBAL_STORE_DWORD_SADDR killed [[V_LSHLREV_B32_e64_1]], [[V_AND_B32_e64_]], killed [[REG_SEQUENCE1]], 0, 0, implicit $exec :: (store (s32) into %ir.arrayidx13, addrspace 1)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.6.if.end14:
  ; GFX1200-NEXT:   S_ENDPGM 0
entry:
  %id = tail call noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x()
  %cmp = icmp samesign ugt i32 %id, 5
  br i1 %cmp, label %do.body, label %if.else

do.body:                                          ; preds = %entry, %do.body
  %i.0 = phi i32 [ %add, %do.body ], [ 0, %entry ]
  %sel.0.off0 = phi i1 [ %xor22, %do.body ], [ false, %entry ]
  %idxprom = zext nneg i32 %i.0 to i64
  %arrayidx = getelementptr inbounds nuw i32, ptr addrspace(1) %filter.coerce, i64 %idxprom
  %load = load i32, ptr addrspace(1) %arrayidx, align 4
  %cmp3 = icmp slt i32 %load, 7
  %xor22 = xor i1 %sel.0.off0, %cmp3
  %add = add nuw nsw i32 %i.0, 16
  %cmp5 = icmp sgt i32 %load, 11
  br i1 %cmp5, label %do.body, label %if.end

if.else:                                          ; preds = %entry
  %idxprom6 = zext nneg i32 %id to i64
  %arrayidx7 = getelementptr inbounds nuw i32, ptr addrspace(1) %filter.coerce, i64 %idxprom6
  %load2 = load i32, ptr addrspace(1) %arrayidx7, align 4
  %cmp8 = icmp sgt i32 %load2, 2
  br label %if.end

if.end:                                           ; preds = %do.body, %if.else
  %sel.1.in = phi i1 [ %cmp8, %if.else ], [ %xor22, %do.body ]
  br i1 %sel.1.in, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end
  %idxprom12 = zext nneg i32 %id to i64
  %arrayidx13 = getelementptr inbounds nuw i32, ptr addrspace(1) %out.coerce, i64 %idxprom12
  store i32 %id, ptr addrspace(1) %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end
  ret void
}

declare noundef i32 @llvm.amdgcn.workitem.id.x()

