; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx90a -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 -simplifycfg-require-and-preserve-domtree=1 < %s | FileCheck -check-prefixes=GFX90a %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1200 -verify-machineinstrs -stop-after=finalize-isel -amdgpu-wave-transform-cf=1 -simplifycfg-require-and-preserve-domtree=1 < %s | FileCheck -check-prefixes=GFX1200 %s

define hidden void @widget() {
  ; GFX90a-LABEL: name: widget
  ; GFX90a: bb.0.bb:
  ; GFX90a-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; GFX90a-NEXT:   liveins: $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9, $sgpr10_sgpr11, $sgpr12, $sgpr13, $sgpr14, $sgpr15, $vgpr31
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr31
  ; GFX90a-NEXT:   [[COPY1:%[0-9]+]]:sgpr_32 = COPY $sgpr15
  ; GFX90a-NEXT:   [[COPY2:%[0-9]+]]:sgpr_32 = COPY $sgpr14
  ; GFX90a-NEXT:   [[COPY3:%[0-9]+]]:sgpr_32 = COPY $sgpr13
  ; GFX90a-NEXT:   [[COPY4:%[0-9]+]]:sgpr_32 = COPY $sgpr12
  ; GFX90a-NEXT:   [[COPY5:%[0-9]+]]:sgpr_64 = COPY $sgpr10_sgpr11
  ; GFX90a-NEXT:   [[COPY6:%[0-9]+]]:sgpr_64 = COPY $sgpr8_sgpr9
  ; GFX90a-NEXT:   [[COPY7:%[0-9]+]]:sgpr_64 = COPY $sgpr6_sgpr7
  ; GFX90a-NEXT:   [[COPY8:%[0-9]+]]:sgpr_64 = COPY $sgpr4_sgpr5
  ; GFX90a-NEXT:   [[V_MOV_B:%[0-9]+]]:vreg_64_align2 = V_MOV_B64_PSEUDO 0, implicit $exec
  ; GFX90a-NEXT:   [[GLOBAL_LOAD_DWORD:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD killed [[V_MOV_B]], 0, 0, implicit $exec :: (load (s32) from `ptr addrspace(1) null`, align 16, addrspace 1)
  ; GFX90a-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX90a-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 21
  ; GFX90a-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX90a-NEXT:   [[V_CMP_LT_I32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_LT_I32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_LT_I32_e64_]], %bb.2
  ; GFX90a-NEXT:   S_BRANCH %bb.1
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.1.bb2:
  ; GFX90a-NEXT:   successors: %bb.5(0x40000000), %bb.4(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 21
  ; GFX90a-NEXT:   [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_1]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_EQ_U32_e64_]], %bb.5
  ; GFX90a-NEXT:   S_BRANCH %bb.4
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.2.bb4:
  ; GFX90a-NEXT:   successors: %bb.3(0x40000000), %bb.4(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 9
  ; GFX90a-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_NE_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_NE_U32_e64_]], %bb.4
  ; GFX90a-NEXT:   S_BRANCH %bb.3
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.3.bb7:
  ; GFX90a-NEXT:   successors: %bb.6(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX90a-NEXT:   [[SI_PC_ADD_REL_OFFSET:%[0-9]+]]:sreg_64 = SI_PC_ADD_REL_OFFSET target-flags(amdgpu-rel32-lo) @wibble, target-flags(amdgpu-rel32-hi) @wibble, implicit-def dead $scc
  ; GFX90a-NEXT:   [[COPY9:%[0-9]+]]:sgpr_128 = COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; GFX90a-NEXT:   $sgpr4_sgpr5 = COPY [[COPY8]]
  ; GFX90a-NEXT:   $sgpr6_sgpr7 = COPY [[COPY7]]
  ; GFX90a-NEXT:   $sgpr8_sgpr9 = COPY [[COPY6]]
  ; GFX90a-NEXT:   $sgpr10_sgpr11 = COPY [[COPY5]]
  ; GFX90a-NEXT:   $sgpr12 = COPY [[COPY4]]
  ; GFX90a-NEXT:   $sgpr13 = COPY [[COPY3]]
  ; GFX90a-NEXT:   $sgpr14 = COPY [[COPY2]]
  ; GFX90a-NEXT:   $sgpr15 = COPY [[COPY1]]
  ; GFX90a-NEXT:   $vgpr31 = COPY [[COPY]]
  ; GFX90a-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[COPY9]]
  ; GFX90a-NEXT:   $sgpr30_sgpr31 = SI_CALL killed [[SI_PC_ADD_REL_OFFSET]], @wibble, csr_amdgpu_gfx90ainsts, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def $vgpr0
  ; GFX90a-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX90a-NEXT:   [[COPY10:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX90a-NEXT:   S_BRANCH %bb.6
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.4.bb9:
  ; GFX90a-NEXT:   successors: %bb.6(0x40000000), %bb.5(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX90a-NEXT:   [[SI_PC_ADD_REL_OFFSET1:%[0-9]+]]:sreg_64 = SI_PC_ADD_REL_OFFSET target-flags(amdgpu-rel32-lo) @wibble, target-flags(amdgpu-rel32-hi) @wibble, implicit-def dead $scc
  ; GFX90a-NEXT:   [[COPY11:%[0-9]+]]:sgpr_128 = COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; GFX90a-NEXT:   $sgpr4_sgpr5 = COPY [[COPY8]]
  ; GFX90a-NEXT:   $sgpr6_sgpr7 = COPY [[COPY7]]
  ; GFX90a-NEXT:   $sgpr8_sgpr9 = COPY [[COPY6]]
  ; GFX90a-NEXT:   $sgpr10_sgpr11 = COPY [[COPY5]]
  ; GFX90a-NEXT:   $sgpr12 = COPY [[COPY4]]
  ; GFX90a-NEXT:   $sgpr13 = COPY [[COPY3]]
  ; GFX90a-NEXT:   $sgpr14 = COPY [[COPY2]]
  ; GFX90a-NEXT:   $sgpr15 = COPY [[COPY1]]
  ; GFX90a-NEXT:   $vgpr31 = COPY [[COPY]]
  ; GFX90a-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[COPY11]]
  ; GFX90a-NEXT:   $sgpr30_sgpr31 = SI_CALL killed [[SI_PC_ADD_REL_OFFSET1]], @wibble, csr_amdgpu_gfx90ainsts, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def $vgpr0
  ; GFX90a-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX90a-NEXT:   [[COPY12:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX90a-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sgpr_32 = S_MOV_B32 0
  ; GFX90a-NEXT:   [[V_CMP_GT_F32_e64_:%[0-9]+]]:sreg_64 = nsz nofpexcept V_CMP_GT_F32_e64 0, [[COPY12]], 0, killed [[S_MOV_B32_3]], 0, implicit $mode, implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND killed [[V_CMP_GT_F32_e64_]], %bb.6
  ; GFX90a-NEXT:   S_BRANCH %bb.5
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.5.bb12:
  ; GFX90a-NEXT:   successors: %bb.6(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX90a-NEXT:   [[V_MOV_B1:%[0-9]+]]:vreg_64_align2 = V_MOV_B64_PSEUDO 0, implicit $exec
  ; GFX90a-NEXT:   GLOBAL_STORE_DWORD killed [[V_MOV_B1]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(1) null`, align 8, addrspace 1)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.6.UnifiedReturnBlock:
  ; GFX90a-NEXT:   SI_RETURN
  ;
  ; GFX1200-LABEL: name: widget
  ; GFX1200: bb.0.bb:
  ; GFX1200-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; GFX1200-NEXT:   liveins: $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9, $sgpr10_sgpr11, $sgpr12, $sgpr13, $sgpr14, $sgpr15, $vgpr31
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr31
  ; GFX1200-NEXT:   [[COPY1:%[0-9]+]]:sgpr_32 = COPY $sgpr15
  ; GFX1200-NEXT:   [[COPY2:%[0-9]+]]:sgpr_32 = COPY $sgpr14
  ; GFX1200-NEXT:   [[COPY3:%[0-9]+]]:sgpr_32 = COPY $sgpr13
  ; GFX1200-NEXT:   [[COPY4:%[0-9]+]]:sgpr_32 = COPY $sgpr12
  ; GFX1200-NEXT:   [[COPY5:%[0-9]+]]:sgpr_64 = COPY $sgpr10_sgpr11
  ; GFX1200-NEXT:   [[COPY6:%[0-9]+]]:sgpr_64 = COPY $sgpr8_sgpr9
  ; GFX1200-NEXT:   [[COPY7:%[0-9]+]]:sgpr_64 = COPY $sgpr6_sgpr7
  ; GFX1200-NEXT:   [[COPY8:%[0-9]+]]:sgpr_64 = COPY $sgpr4_sgpr5
  ; GFX1200-NEXT:   [[V_MOV_B:%[0-9]+]]:vreg_64 = V_MOV_B64_PSEUDO 0, implicit $exec
  ; GFX1200-NEXT:   [[GLOBAL_LOAD_DWORD:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD killed [[V_MOV_B]], 0, 0, implicit $exec :: (load (s32) from `ptr addrspace(1) null`, align 16, addrspace 1)
  ; GFX1200-NEXT:   [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 21
  ; GFX1200-NEXT:   [[DEF1:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[V_CMP_LT_I32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_LT_I32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_LT_I32_e64_]], %bb.2
  ; GFX1200-NEXT:   S_BRANCH %bb.1
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.1.bb2:
  ; GFX1200-NEXT:   successors: %bb.5(0x40000000), %bb.4(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 21
  ; GFX1200-NEXT:   [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_EQ_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_1]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_EQ_U32_e64_]], %bb.5
  ; GFX1200-NEXT:   S_BRANCH %bb.4
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.2.bb4:
  ; GFX1200-NEXT:   successors: %bb.3(0x40000000), %bb.4(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 9
  ; GFX1200-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = V_CMP_NE_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[V_CMP_NE_U32_e64_]], %bb.4
  ; GFX1200-NEXT:   S_BRANCH %bb.3
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.3.bb7:
  ; GFX1200-NEXT:   successors: %bb.6(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX1200-NEXT:   [[SI_PC_ADD_REL_OFFSET:%[0-9]+]]:sreg_64 = SI_PC_ADD_REL_OFFSET target-flags(amdgpu-rel32-lo) @wibble, target-flags(amdgpu-rel32-hi) @wibble, implicit-def dead $scc
  ; GFX1200-NEXT:   $sgpr4_sgpr5 = COPY [[COPY8]]
  ; GFX1200-NEXT:   $sgpr6_sgpr7 = COPY [[COPY7]]
  ; GFX1200-NEXT:   $sgpr8_sgpr9 = COPY [[COPY6]]
  ; GFX1200-NEXT:   $sgpr10_sgpr11 = COPY [[COPY5]]
  ; GFX1200-NEXT:   $sgpr12 = COPY [[COPY4]]
  ; GFX1200-NEXT:   $sgpr13 = COPY [[COPY3]]
  ; GFX1200-NEXT:   $sgpr14 = COPY [[COPY2]]
  ; GFX1200-NEXT:   $sgpr15 = COPY [[COPY1]]
  ; GFX1200-NEXT:   $vgpr31 = COPY [[COPY]]
  ; GFX1200-NEXT:   $sgpr30_sgpr31 = SI_CALL killed [[SI_PC_ADD_REL_OFFSET]], @wibble, csr_amdgpu, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31, implicit-def $vgpr0
  ; GFX1200-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX1200-NEXT:   [[COPY9:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX1200-NEXT:   S_BRANCH %bb.6
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.4.bb9:
  ; GFX1200-NEXT:   successors: %bb.6(0x40000000), %bb.5(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX1200-NEXT:   [[SI_PC_ADD_REL_OFFSET1:%[0-9]+]]:sreg_64 = SI_PC_ADD_REL_OFFSET target-flags(amdgpu-rel32-lo) @wibble, target-flags(amdgpu-rel32-hi) @wibble, implicit-def dead $scc
  ; GFX1200-NEXT:   $sgpr4_sgpr5 = COPY [[COPY8]]
  ; GFX1200-NEXT:   $sgpr6_sgpr7 = COPY [[COPY7]]
  ; GFX1200-NEXT:   $sgpr8_sgpr9 = COPY [[COPY6]]
  ; GFX1200-NEXT:   $sgpr10_sgpr11 = COPY [[COPY5]]
  ; GFX1200-NEXT:   $sgpr12 = COPY [[COPY4]]
  ; GFX1200-NEXT:   $sgpr13 = COPY [[COPY3]]
  ; GFX1200-NEXT:   $sgpr14 = COPY [[COPY2]]
  ; GFX1200-NEXT:   $sgpr15 = COPY [[COPY1]]
  ; GFX1200-NEXT:   $vgpr31 = COPY [[COPY]]
  ; GFX1200-NEXT:   $sgpr30_sgpr31 = SI_CALL killed [[SI_PC_ADD_REL_OFFSET1]], @wibble, csr_amdgpu, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31, implicit-def $vgpr0
  ; GFX1200-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX1200-NEXT:   [[COPY10:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX1200-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sgpr_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[V_CMP_GT_F32_e64_:%[0-9]+]]:sreg_32 = nsz nofpexcept V_CMP_GT_F32_e64 0, [[COPY10]], 0, killed [[S_MOV_B32_3]], 0, implicit $mode, implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_GT_F32_e64_]], %bb.6
  ; GFX1200-NEXT:   S_BRANCH %bb.5
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.5.bb12:
  ; GFX1200-NEXT:   successors: %bb.6(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX1200-NEXT:   [[V_MOV_B1:%[0-9]+]]:vreg_64 = V_MOV_B64_PSEUDO 0, implicit $exec
  ; GFX1200-NEXT:   GLOBAL_STORE_DWORD killed [[V_MOV_B1]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(1) null`, align 8, addrspace 1)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.6.UnifiedReturnBlock:
  ; GFX1200-NEXT:   SI_RETURN
bb:
  %tmp = load i32, ptr addrspace(1) null, align 16
  %tmp1 = icmp slt i32 %tmp, 21
  br i1 %tmp1, label %bb4, label %bb2

bb2:                                              ; preds = %bb
  %tmp3 = icmp eq i32 %tmp, 21
  br i1 %tmp3, label %bb12, label %bb9

bb4:                                              ; preds = %bb
  %tmp5 = icmp eq i32 %tmp, 9
  br i1 %tmp5, label %bb7, label %bb9

bb6:                                              ; preds = %bb9
  ret void

bb7:                                              ; preds = %bb4
  %tmp8 = call float @wibble()
  ret void

bb9:                                              ; preds = %bb4, %bb2
  %tmp10 = call float @wibble()
  %tmp11 = fcmp nsz ogt float %tmp10, 0.000000e+00
  br i1 %tmp11, label %bb6, label %bb12

bb12:                                             ; preds = %bb9, %bb2
  store float 0.000000e+00, ptr addrspace(1) null, align 8
  ret void
}

declare hidden float @wibble() local_unnamed_addr

define hidden void @blam() {
  ; GFX90a-LABEL: name: blam
  ; GFX90a: bb.0.bb:
  ; GFX90a-NEXT:   successors: %bb.1(0x80000000)
  ; GFX90a-NEXT:   liveins: $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9, $sgpr10_sgpr11, $sgpr12, $sgpr13, $sgpr14, $sgpr15, $vgpr31
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr31
  ; GFX90a-NEXT:   [[COPY1:%[0-9]+]]:sgpr_32 = COPY $sgpr15
  ; GFX90a-NEXT:   [[COPY2:%[0-9]+]]:sgpr_32 = COPY $sgpr14
  ; GFX90a-NEXT:   [[COPY3:%[0-9]+]]:sgpr_32 = COPY $sgpr13
  ; GFX90a-NEXT:   [[COPY4:%[0-9]+]]:sgpr_32 = COPY $sgpr12
  ; GFX90a-NEXT:   [[COPY5:%[0-9]+]]:sgpr_64 = COPY $sgpr10_sgpr11
  ; GFX90a-NEXT:   [[COPY6:%[0-9]+]]:sgpr_64 = COPY $sgpr8_sgpr9
  ; GFX90a-NEXT:   [[COPY7:%[0-9]+]]:sgpr_64 = COPY $sgpr6_sgpr7
  ; GFX90a-NEXT:   [[COPY8:%[0-9]+]]:sgpr_64 = COPY $sgpr4_sgpr5
  ; GFX90a-NEXT:   [[V_MOV_B:%[0-9]+]]:vreg_64_align2 = V_MOV_B64_PSEUDO 0, implicit $exec
  ; GFX90a-NEXT:   [[FLAT_LOAD_DWORD:%[0-9]+]]:vgpr_32 = FLAT_LOAD_DWORD killed [[V_MOV_B]], 0, 0, implicit $exec, implicit $flat_scr :: (load (s32) from `ptr null`, align 16)
  ; GFX90a-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1023
  ; GFX90a-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 [[COPY]], killed [[S_MOV_B32_]], implicit $exec
  ; GFX90a-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX90a-NEXT:   [[V_LSHLREV_B32_e64_:%[0-9]+]]:vgpr_32 = nuw nsw V_LSHLREV_B32_e64 killed [[S_MOV_B32_1]], killed [[V_AND_B32_e64_]], implicit $exec
  ; GFX90a-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX90a-NEXT:   [[DEF:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX90a-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:vreg_64_align2 = REG_SEQUENCE [[V_LSHLREV_B32_e64_]], %subreg.sub0, killed [[V_MOV_B32_e32_]], %subreg.sub1
  ; GFX90a-NEXT:   [[COPY9:%[0-9]+]]:vreg_64_align2 = COPY [[REG_SEQUENCE]]
  ; GFX90a-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sgpr_32 = S_MOV_B32 0
  ; GFX90a-NEXT:   [[V_CMP_EQ_F32_e64_:%[0-9]+]]:sreg_64_xexec = nsz nofpexcept V_CMP_EQ_F32_e64 0, [[FLAT_LOAD_DWORD]], 0, killed [[S_MOV_B32_3]], 0, implicit $mode, implicit $exec
  ; GFX90a-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, -1, [[V_CMP_EQ_F32_e64_]], implicit $exec
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.1.bb2:
  ; GFX90a-NEXT:   successors: %bb.3(0x40000000), %bb.2(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[GLOBAL_LOAD_DWORD:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD [[COPY9]], 0, 0, implicit $exec :: (load (s32) from %ir.gep, align 16, addrspace 1)
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_1:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX90a-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_1]], $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(5) null`, align 8, addrspace 5)
  ; GFX90a-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GFX90a-NEXT:   [[V_CMP_LT_I32_e64_:%[0-9]+]]:sreg_64 = V_CMP_LT_I32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_4]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND killed [[V_CMP_LT_I32_e64_]], %bb.3
  ; GFX90a-NEXT:   S_BRANCH %bb.2
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.2.bb6:
  ; GFX90a-NEXT:   successors: %bb.5(0x40000000), %bb.1(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GFX90a-NEXT:   [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64 = V_CMP_EQ_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_5]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND killed [[V_CMP_EQ_U32_e64_]], %bb.5
  ; GFX90a-NEXT:   S_BRANCH %bb.1
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.3.bb8:
  ; GFX90a-NEXT:   successors: %bb.4(0x40000000), %bb.1(0x40000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX90a-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_64 = V_CMP_NE_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_6]], implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND killed [[V_CMP_NE_U32_e64_]], %bb.1
  ; GFX90a-NEXT:   S_BRANCH %bb.4
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.4.bb10:
  ; GFX90a-NEXT:   successors: %bb.9(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_2:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 2143289344, implicit $exec
  ; GFX90a-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_2]], $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(5) null`, align 16, addrspace 5)
  ; GFX90a-NEXT:   S_BRANCH %bb.9
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.5.bb11:
  ; GFX90a-NEXT:   successors: %bb.1(0x50000000), %bb.6(0x30000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX90a-NEXT:   [[SI_PC_ADD_REL_OFFSET:%[0-9]+]]:sreg_64 = SI_PC_ADD_REL_OFFSET target-flags(amdgpu-rel32-lo) @spam, target-flags(amdgpu-rel32-hi) @spam, implicit-def dead $scc
  ; GFX90a-NEXT:   [[COPY10:%[0-9]+]]:sgpr_128 = COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; GFX90a-NEXT:   $sgpr4_sgpr5 = COPY [[COPY8]]
  ; GFX90a-NEXT:   $sgpr6_sgpr7 = COPY [[COPY7]]
  ; GFX90a-NEXT:   $sgpr8_sgpr9 = COPY [[COPY6]]
  ; GFX90a-NEXT:   $sgpr10_sgpr11 = COPY [[COPY5]]
  ; GFX90a-NEXT:   $sgpr12 = COPY [[COPY4]]
  ; GFX90a-NEXT:   $sgpr13 = COPY [[COPY3]]
  ; GFX90a-NEXT:   $sgpr14 = COPY [[COPY2]]
  ; GFX90a-NEXT:   $sgpr15 = COPY [[COPY1]]
  ; GFX90a-NEXT:   $vgpr31 = COPY [[COPY]]
  ; GFX90a-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[COPY10]]
  ; GFX90a-NEXT:   $sgpr30_sgpr31 = SI_CALL killed [[SI_PC_ADD_REL_OFFSET]], @spam, csr_amdgpu_gfx90ainsts, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def $vgpr0
  ; GFX90a-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX90a-NEXT:   [[COPY11:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX90a-NEXT:   [[S_MOV_B32_7:%[0-9]+]]:sgpr_32 = S_MOV_B32 0
  ; GFX90a-NEXT:   [[V_CMP_EQ_F32_e64_1:%[0-9]+]]:sreg_64 = nsz nofpexcept V_CMP_EQ_F32_e64 0, [[COPY11]], 0, killed [[S_MOV_B32_7]], 0, implicit $mode, implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND killed [[V_CMP_EQ_F32_e64_1]], %bb.1
  ; GFX90a-NEXT:   S_BRANCH %bb.6
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.6.bb14:
  ; GFX90a-NEXT:   successors: %bb.8(0x50000000), %bb.7(0x30000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[V_CMP_NE_U32_e64_1:%[0-9]+]]:sreg_64 = V_CMP_NE_U32_e64 [[V_CNDMASK_B32_e64_]], 0, implicit $exec
  ; GFX90a-NEXT:   SI_BRCOND [[V_CMP_NE_U32_e64_1]], %bb.8
  ; GFX90a-NEXT:   S_BRANCH %bb.7
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.7.bb16:
  ; GFX90a-NEXT:   successors: %bb.8(0x7c000000), %bb.10(0x04000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_3:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 2143289344, implicit $exec
  ; GFX90a-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_3]], $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(5) null`, align 16, addrspace 5)
  ; GFX90a-NEXT:   [[S_MOV_B64_:%[0-9]+]]:sreg_64 = S_MOV_B64 0
  ; GFX90a-NEXT:   SI_BRCOND_UNIFORM killed [[S_MOV_B64_]], %bb.10
  ; GFX90a-NEXT:   S_BRANCH %bb.8
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.8.bb17:
  ; GFX90a-NEXT:   successors: %bb.9(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   BUFFER_STORE_DWORD_OFFSET [[FLAT_LOAD_DWORD]], $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(5) null`, align 16, addrspace 5)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.9.bb18:
  ; GFX90a-NEXT:   successors: %bb.1(0x80000000)
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT:   [[V_MOV_B32_e32_4:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 2143289344, implicit $exec
  ; GFX90a-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_4]], $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (store (s32) into `ptr addrspace(5) null`, addrspace 5)
  ; GFX90a-NEXT:   S_BRANCH %bb.1
  ; GFX90a-NEXT: {{  $}}
  ; GFX90a-NEXT: bb.10.DummyReturnBlock:
  ; GFX90a-NEXT:   SI_RETURN
  ;
  ; GFX1200-LABEL: name: blam
  ; GFX1200: bb.0.bb:
  ; GFX1200-NEXT:   successors: %bb.1(0x80000000)
  ; GFX1200-NEXT:   liveins: $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9, $sgpr10_sgpr11, $sgpr12, $sgpr13, $sgpr14, $sgpr15, $vgpr31
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr31
  ; GFX1200-NEXT:   [[COPY1:%[0-9]+]]:sgpr_32 = COPY $sgpr15
  ; GFX1200-NEXT:   [[COPY2:%[0-9]+]]:sgpr_32 = COPY $sgpr14
  ; GFX1200-NEXT:   [[COPY3:%[0-9]+]]:sgpr_32 = COPY $sgpr13
  ; GFX1200-NEXT:   [[COPY4:%[0-9]+]]:sgpr_32 = COPY $sgpr12
  ; GFX1200-NEXT:   [[COPY5:%[0-9]+]]:sgpr_64 = COPY $sgpr10_sgpr11
  ; GFX1200-NEXT:   [[COPY6:%[0-9]+]]:sgpr_64 = COPY $sgpr8_sgpr9
  ; GFX1200-NEXT:   [[COPY7:%[0-9]+]]:sgpr_64 = COPY $sgpr6_sgpr7
  ; GFX1200-NEXT:   [[COPY8:%[0-9]+]]:sgpr_64 = COPY $sgpr4_sgpr5
  ; GFX1200-NEXT:   [[V_MOV_B:%[0-9]+]]:vreg_64 = V_MOV_B64_PSEUDO 0, implicit $exec
  ; GFX1200-NEXT:   [[FLAT_LOAD_DWORD:%[0-9]+]]:vgpr_32 = FLAT_LOAD_DWORD killed [[V_MOV_B]], 0, 0, implicit $exec, implicit $flat_scr :: (load (s32) from `ptr null`, align 16)
  ; GFX1200-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1023
  ; GFX1200-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 [[COPY]], killed [[S_MOV_B32_]], implicit $exec
  ; GFX1200-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX1200-NEXT:   [[V_LSHLREV_B32_e64_:%[0-9]+]]:vgpr_32 = nuw nsw V_LSHLREV_B32_e64 killed [[S_MOV_B32_1]], killed [[V_AND_B32_e64_]], implicit $exec
  ; GFX1200-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[DEF:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GFX1200-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:vreg_64 = REG_SEQUENCE [[V_LSHLREV_B32_e64_]], %subreg.sub0, killed [[V_MOV_B32_e32_]], %subreg.sub1
  ; GFX1200-NEXT:   [[COPY9:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]]
  ; GFX1200-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sgpr_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[V_CMP_EQ_F32_e64_:%[0-9]+]]:sreg_32_xm0_xexec = nsz nofpexcept V_CMP_EQ_F32_e64 0, [[FLAT_LOAD_DWORD]], 0, killed [[S_MOV_B32_3]], 0, implicit $mode, implicit $exec
  ; GFX1200-NEXT:   [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, -1, [[V_CMP_EQ_F32_e64_]], implicit $exec
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.1.bb2:
  ; GFX1200-NEXT:   successors: %bb.3(0x40000000), %bb.2(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[GLOBAL_LOAD_DWORD:%[0-9]+]]:vgpr_32 = GLOBAL_LOAD_DWORD [[COPY9]], 0, 0, implicit $exec :: (load (s32) from %ir.gep, align 16, addrspace 1)
  ; GFX1200-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32_xexec_hi = S_MOV_B32 0
  ; GFX1200-NEXT:   [[COPY10:%[0-9]+]]:vgpr_32 = COPY [[S_MOV_B32_4]]
  ; GFX1200-NEXT:   SCRATCH_STORE_DWORD_SADDR [[COPY10]], [[S_MOV_B32_4]], 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into `ptr addrspace(5) null`, align 8, addrspace 5)
  ; GFX1200-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GFX1200-NEXT:   [[V_CMP_LT_I32_e64_:%[0-9]+]]:sreg_32 = V_CMP_LT_I32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_5]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_LT_I32_e64_]], %bb.3
  ; GFX1200-NEXT:   S_BRANCH %bb.2
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.2.bb6:
  ; GFX1200-NEXT:   successors: %bb.5(0x40000000), %bb.1(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 3
  ; GFX1200-NEXT:   [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_32 = V_CMP_EQ_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_6]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_EQ_U32_e64_]], %bb.5
  ; GFX1200-NEXT:   S_BRANCH %bb.1
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.3.bb8:
  ; GFX1200-NEXT:   successors: %bb.4(0x40000000), %bb.1(0x40000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_7:%[0-9]+]]:sreg_32 = S_MOV_B32 1
  ; GFX1200-NEXT:   [[V_CMP_NE_U32_e64_:%[0-9]+]]:sreg_32 = V_CMP_NE_U32_e64 [[GLOBAL_LOAD_DWORD]], killed [[S_MOV_B32_7]], implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_NE_U32_e64_]], %bb.1
  ; GFX1200-NEXT:   S_BRANCH %bb.4
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.4.bb10:
  ; GFX1200-NEXT:   successors: %bb.9(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_8:%[0-9]+]]:sreg_32_xexec_hi = S_MOV_B32 0
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_1:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 2143289344, implicit $exec
  ; GFX1200-NEXT:   SCRATCH_STORE_DWORD_SADDR killed [[V_MOV_B32_e32_1]], killed [[S_MOV_B32_8]], 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into `ptr addrspace(5) null`, align 16, addrspace 5)
  ; GFX1200-NEXT:   S_BRANCH %bb.9
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.5.bb11:
  ; GFX1200-NEXT:   successors: %bb.1(0x50000000), %bb.6(0x30000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX1200-NEXT:   [[SI_PC_ADD_REL_OFFSET:%[0-9]+]]:sreg_64 = SI_PC_ADD_REL_OFFSET target-flags(amdgpu-rel32-lo) @spam, target-flags(amdgpu-rel32-hi) @spam, implicit-def dead $scc
  ; GFX1200-NEXT:   $sgpr4_sgpr5 = COPY [[COPY8]]
  ; GFX1200-NEXT:   $sgpr6_sgpr7 = COPY [[COPY7]]
  ; GFX1200-NEXT:   $sgpr8_sgpr9 = COPY [[COPY6]]
  ; GFX1200-NEXT:   $sgpr10_sgpr11 = COPY [[COPY5]]
  ; GFX1200-NEXT:   $sgpr12 = COPY [[COPY4]]
  ; GFX1200-NEXT:   $sgpr13 = COPY [[COPY3]]
  ; GFX1200-NEXT:   $sgpr14 = COPY [[COPY2]]
  ; GFX1200-NEXT:   $sgpr15 = COPY [[COPY1]]
  ; GFX1200-NEXT:   $vgpr31 = COPY [[COPY]]
  ; GFX1200-NEXT:   $sgpr30_sgpr31 = SI_CALL killed [[SI_PC_ADD_REL_OFFSET]], @spam, csr_amdgpu, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31, implicit-def $vgpr0
  ; GFX1200-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc, implicit-def $sgpr32, implicit $sgpr32
  ; GFX1200-NEXT:   [[COPY11:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX1200-NEXT:   [[S_MOV_B32_9:%[0-9]+]]:sgpr_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   [[V_CMP_EQ_F32_e64_1:%[0-9]+]]:sreg_32 = nsz nofpexcept V_CMP_EQ_F32_e64 0, [[COPY11]], 0, killed [[S_MOV_B32_9]], 0, implicit $mode, implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND killed [[V_CMP_EQ_F32_e64_1]], %bb.1
  ; GFX1200-NEXT:   S_BRANCH %bb.6
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.6.bb14:
  ; GFX1200-NEXT:   successors: %bb.8(0x50000000), %bb.7(0x30000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[V_CMP_NE_U32_e64_1:%[0-9]+]]:sreg_32 = V_CMP_NE_U32_e64 [[V_CNDMASK_B32_e64_]], 0, implicit $exec
  ; GFX1200-NEXT:   SI_BRCOND [[V_CMP_NE_U32_e64_1]], %bb.8
  ; GFX1200-NEXT:   S_BRANCH %bb.7
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.7.bb16:
  ; GFX1200-NEXT:   successors: %bb.8(0x7c000000), %bb.10(0x04000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_10:%[0-9]+]]:sreg_32_xexec_hi = S_MOV_B32 0
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_2:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 2143289344, implicit $exec
  ; GFX1200-NEXT:   SCRATCH_STORE_DWORD_SADDR killed [[V_MOV_B32_e32_2]], killed [[S_MOV_B32_10]], 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into `ptr addrspace(5) null`, align 16, addrspace 5)
  ; GFX1200-NEXT:   [[S_MOV_B32_11:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX1200-NEXT:   SI_BRCOND_UNIFORM killed [[S_MOV_B32_11]], %bb.10
  ; GFX1200-NEXT:   S_BRANCH %bb.8
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.8.bb17:
  ; GFX1200-NEXT:   successors: %bb.9(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_12:%[0-9]+]]:sreg_32_xexec_hi = S_MOV_B32 0
  ; GFX1200-NEXT:   SCRATCH_STORE_DWORD_SADDR [[FLAT_LOAD_DWORD]], killed [[S_MOV_B32_12]], 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into `ptr addrspace(5) null`, align 16, addrspace 5)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.9.bb18:
  ; GFX1200-NEXT:   successors: %bb.1(0x80000000)
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT:   [[S_MOV_B32_13:%[0-9]+]]:sreg_32_xexec_hi = S_MOV_B32 0
  ; GFX1200-NEXT:   [[V_MOV_B32_e32_3:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 2143289344, implicit $exec
  ; GFX1200-NEXT:   SCRATCH_STORE_DWORD_SADDR killed [[V_MOV_B32_e32_3]], killed [[S_MOV_B32_13]], 0, 0, implicit $exec, implicit $flat_scr :: (store (s32) into `ptr addrspace(5) null`, addrspace 5)
  ; GFX1200-NEXT:   S_BRANCH %bb.1
  ; GFX1200-NEXT: {{  $}}
  ; GFX1200-NEXT: bb.10.DummyReturnBlock:
  ; GFX1200-NEXT:   SI_RETURN
bb:
  %tmp = load float, ptr null, align 16
  br label %bb2

bb1:                                              ; preds = %bb8, %bb6
  br label %bb2

bb2:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %gep  = getelementptr inbounds i32, ptr addrspace(1) null, i32 %tid
  %tmp3 = load i32, ptr addrspace(1) %gep, align 16
  store float 0.000000e+00, ptr addrspace(5) null, align 8
  br label %bb4

bb4:                                              ; preds = %bb2
  %tmp5 = icmp slt i32 %tmp3, 3
  br i1 %tmp5, label %bb8, label %bb6

bb6:                                              ; preds = %bb4
  %tmp7 = icmp eq i32 %tmp3, 3
  br i1 %tmp7, label %bb11, label %bb1

bb8:                                              ; preds = %bb4
  %tmp9 = icmp eq i32 %tmp3, 1
  br i1 %tmp9, label %bb10, label %bb1

bb10:                                             ; preds = %bb8
  store float 0x7FF8000000000000, ptr addrspace(5) null, align 16
  br label %bb18

bb11:                                             ; preds = %bb6
  %tmp12 = call float @spam()
  %tmp13 = fcmp nsz oeq float %tmp12, 0.000000e+00
  br i1 %tmp13, label %bb2, label %bb14

bb14:                                             ; preds = %bb11
  %tmp15 = fcmp nsz oeq float %tmp, 0.000000e+00
  br i1 %tmp15, label %bb17, label %bb16

bb16:                                             ; preds = %bb14
  store float 0x7FF8000000000000, ptr addrspace(5) null, align 16
  br label %bb17

bb17:                                             ; preds = %bb16, %bb14
  store float %tmp, ptr addrspace(5) null, align 16
  br label %bb18

bb18:                                             ; preds = %bb17, %bb10
  store float 0x7FF8000000000000, ptr addrspace(5) null, align 4
  br label %bb2
}

declare i32 @llvm.amdgcn.workitem.id.x()

declare hidden float @spam()

!llvm.module.flags = !{!0}
!0 = !{i32 1, !"amdhsa_code_object_version", i32 500}
