; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: opt -passes=amdgpu-attributor -mcpu=kaveri < %s | llc -mcpu=gfx90a -enable-ipra=0 | FileCheck -enable-var-scope -check-prefixes=GCN,GFX7 %s
; RUN: opt -passes=amdgpu-attributor -mcpu=gfx90a -mattr=-xnack < %s | llc -mcpu=gfx90a -mattr=-xnack -enable-ipra=0 | FileCheck -enable-var-scope -check-prefixes=GCN,GFX90A %s

target triple = "amdgcn-amd-amdhsa"

define void @use_workitem_id_x() #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.x()
  store volatile i32 %val, ptr addrspace(1) poison
  ret void
}

define void @use_workitem_id_y() #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.y()
  store volatile i32 %val, ptr addrspace(1) poison
  ret void
}

define void @use_workitem_id_z() #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %val, ptr addrspace(1) poison
  ret void
}

define void @use_workitem_id_xy() #1 {
  %val0 = call i32 @llvm.amdgcn.workitem.id.x()
  %val1 = call i32 @llvm.amdgcn.workitem.id.y()
  store volatile i32 %val0, ptr addrspace(1) poison
  store volatile i32 %val1, ptr addrspace(1) poison
  ret void
}

define void @use_workitem_id_xyz() #1 {
  %val0 = call i32 @llvm.amdgcn.workitem.id.x()
  %val1 = call i32 @llvm.amdgcn.workitem.id.y()
  %val2 = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %val0, ptr addrspace(1) poison
  store volatile i32 %val1, ptr addrspace(1) poison
  store volatile i32 %val2, ptr addrspace(1) poison
  ret void
}

define void @use_workitem_id_xz() #1 {
  %val0 = call i32 @llvm.amdgcn.workitem.id.x()
  %val1 = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %val0, ptr addrspace(1) poison
  store volatile i32 %val1, ptr addrspace(1) poison
  ret void
}

define void @use_workitem_id_yz() #1 {
  %val0 = call i32 @llvm.amdgcn.workitem.id.y()
  %val1 = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %val0, ptr addrspace(1) poison
  store volatile i32 %val1, ptr addrspace(1) poison
  ret void
}

define amdgpu_kernel void @kern_indirect_use_workitem_id_x() #1 {
  call void @use_workitem_id_x()
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 0

define amdgpu_kernel void @kern_indirect_use_workitem_id_y() #1 {
  call void @use_workitem_id_y()
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 1

define amdgpu_kernel void @kern_indirect_use_workitem_id_z() #1 {
  call void @use_workitem_id_z()
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 2

define amdgpu_kernel void @kern_indirect_use_workitem_id_xy() #1 {
  call void @use_workitem_id_xy()
  ret void
}

define amdgpu_kernel void @kern_indirect_use_workitem_id_xz() #1 {
  call void @use_workitem_id_xz()
  ret void
}

define amdgpu_kernel void @kern_indirect_use_workitem_id_yz() #1 {
  call void @use_workitem_id_yz()
  ret void
}

define amdgpu_kernel void @kern_indirect_use_workitem_id_xyz() #1 {
  call void @use_workitem_id_xyz()
  ret void
}

define void @func_indirect_use_workitem_id_x() #1 {
  call void @use_workitem_id_x()
  ret void
}

define void @func_indirect_use_workitem_id_y() #1 {
  call void @use_workitem_id_y()
  ret void
}

define void @func_indirect_use_workitem_id_z() #1 {
  call void @use_workitem_id_z()
  ret void
}

define void @other_arg_use_workitem_id_x(i32 %arg0) #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.x()
  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %val, ptr addrspace(1) poison
  ret void
}

define void @other_arg_use_workitem_id_y(i32 %arg0) #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.y()
  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %val, ptr addrspace(1) poison
  ret void
}

define void @other_arg_use_workitem_id_z(i32 %arg0) #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %val, ptr addrspace(1) poison
  ret void
}

define amdgpu_kernel void @kern_indirect_other_arg_use_workitem_id_x() #1 {
  call void @other_arg_use_workitem_id_x(i32 555)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 0

define amdgpu_kernel void @kern_indirect_other_arg_use_workitem_id_y() #1 {
  call void @other_arg_use_workitem_id_y(i32 555)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 1

define amdgpu_kernel void @kern_indirect_other_arg_use_workitem_id_z() #1 {
  call void @other_arg_use_workitem_id_z(i32 555)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 2

define void @too_many_args_use_workitem_id_x(
  i32 %arg0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7,
  i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15,
  i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23,
  i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31) #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.x()
  store volatile i32 %val, ptr addrspace(1) poison

  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %arg1, ptr addrspace(1) poison
  store volatile i32 %arg2, ptr addrspace(1) poison
  store volatile i32 %arg3, ptr addrspace(1) poison
  store volatile i32 %arg4, ptr addrspace(1) poison
  store volatile i32 %arg5, ptr addrspace(1) poison
  store volatile i32 %arg6, ptr addrspace(1) poison
  store volatile i32 %arg7, ptr addrspace(1) poison

  store volatile i32 %arg8, ptr addrspace(1) poison
  store volatile i32 %arg9, ptr addrspace(1) poison
  store volatile i32 %arg10, ptr addrspace(1) poison
  store volatile i32 %arg11, ptr addrspace(1) poison
  store volatile i32 %arg12, ptr addrspace(1) poison
  store volatile i32 %arg13, ptr addrspace(1) poison
  store volatile i32 %arg14, ptr addrspace(1) poison
  store volatile i32 %arg15, ptr addrspace(1) poison

  store volatile i32 %arg16, ptr addrspace(1) poison
  store volatile i32 %arg17, ptr addrspace(1) poison
  store volatile i32 %arg18, ptr addrspace(1) poison
  store volatile i32 %arg19, ptr addrspace(1) poison
  store volatile i32 %arg20, ptr addrspace(1) poison
  store volatile i32 %arg21, ptr addrspace(1) poison
  store volatile i32 %arg22, ptr addrspace(1) poison
  store volatile i32 %arg23, ptr addrspace(1) poison

  store volatile i32 %arg24, ptr addrspace(1) poison
  store volatile i32 %arg25, ptr addrspace(1) poison
  store volatile i32 %arg26, ptr addrspace(1) poison
  store volatile i32 %arg27, ptr addrspace(1) poison
  store volatile i32 %arg28, ptr addrspace(1) poison
  store volatile i32 %arg29, ptr addrspace(1) poison
  store volatile i32 %arg30, ptr addrspace(1) poison
  store volatile i32 %arg31, ptr addrspace(1) poison

  ret void
}

define amdgpu_kernel void @kern_call_too_many_args_use_workitem_id_x() #1 {
  call void @too_many_args_use_workitem_id_x(
    i32 10, i32 20, i32 30, i32 40,
    i32 50, i32 60, i32 70, i32 80,
    i32 90, i32 100, i32 110, i32 120,
    i32 130, i32 140, i32 150, i32 160,
    i32 170, i32 180, i32 190, i32 200,
    i32 210, i32 220, i32 230, i32 240,
    i32 250, i32 260, i32 270, i32 280,
    i32 290, i32 300, i32 310, i32 320)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 0

define void @func_call_too_many_args_use_workitem_id_x(i32 %arg0) #1 {
  store volatile i32 %arg0, ptr addrspace(1) poison
  call void @too_many_args_use_workitem_id_x(
    i32 10, i32 20, i32 30, i32 40,
    i32 50, i32 60, i32 70, i32 80,
    i32 90, i32 100, i32 110, i32 120,
    i32 130, i32 140, i32 150, i32 160,
    i32 170, i32 180, i32 190, i32 200,
    i32 210, i32 220, i32 230, i32 240,
    i32 250, i32 260, i32 270, i32 280,
    i32 290, i32 300, i32 310, i32 320)
  ret void
}

; Requires loading and storing to stack slot.
define void @too_many_args_call_too_many_args_use_workitem_id_x(
  i32 %arg0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7,
  i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15,
  i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23,
  i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31) #1 {
  call void @too_many_args_use_workitem_id_x(
    i32 %arg0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7,
    i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15,
    i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23,
    i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31)
  ret void
}

; stack layout:
; frame[0] = stack passed arg23
; frame[1] = byval arg32
define void @too_many_args_use_workitem_id_x_byval(
  i32 %arg0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7,
  i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15,
  i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23,
  i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, ptr addrspace(5) byval(i32) %arg32) #1 {
  %val = call i32 @llvm.amdgcn.workitem.id.x()
  store volatile i32 %val, ptr addrspace(1) poison

  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %arg1, ptr addrspace(1) poison
  store volatile i32 %arg2, ptr addrspace(1) poison
  store volatile i32 %arg3, ptr addrspace(1) poison
  store volatile i32 %arg4, ptr addrspace(1) poison
  store volatile i32 %arg5, ptr addrspace(1) poison
  store volatile i32 %arg6, ptr addrspace(1) poison
  store volatile i32 %arg7, ptr addrspace(1) poison

  store volatile i32 %arg8, ptr addrspace(1) poison
  store volatile i32 %arg9, ptr addrspace(1) poison
  store volatile i32 %arg10, ptr addrspace(1) poison
  store volatile i32 %arg11, ptr addrspace(1) poison
  store volatile i32 %arg12, ptr addrspace(1) poison
  store volatile i32 %arg13, ptr addrspace(1) poison
  store volatile i32 %arg14, ptr addrspace(1) poison
  store volatile i32 %arg15, ptr addrspace(1) poison

  store volatile i32 %arg16, ptr addrspace(1) poison
  store volatile i32 %arg17, ptr addrspace(1) poison
  store volatile i32 %arg18, ptr addrspace(1) poison
  store volatile i32 %arg19, ptr addrspace(1) poison
  store volatile i32 %arg20, ptr addrspace(1) poison
  store volatile i32 %arg21, ptr addrspace(1) poison
  store volatile i32 %arg22, ptr addrspace(1) poison
  store volatile i32 %arg23, ptr addrspace(1) poison

  store volatile i32 %arg24, ptr addrspace(1) poison
  store volatile i32 %arg25, ptr addrspace(1) poison
  store volatile i32 %arg26, ptr addrspace(1) poison
  store volatile i32 %arg27, ptr addrspace(1) poison
  store volatile i32 %arg28, ptr addrspace(1) poison
  store volatile i32 %arg29, ptr addrspace(1) poison
  store volatile i32 %arg30, ptr addrspace(1) poison
  store volatile i32 %arg31, ptr addrspace(1) poison
  %private = load volatile i32, ptr addrspace(5) %arg32
  ret void
}

; sp[0] = stack passed %arg31
; sp[1] = byval
; Local stack object initialize. Offset 0 is the emergency spill slot.
define amdgpu_kernel void @kern_call_too_many_args_use_workitem_id_x_byval() #1 {
  %alloca = alloca i32, align 4, addrspace(5)
  store volatile i32 999, ptr addrspace(5) %alloca
  call void @too_many_args_use_workitem_id_x_byval(
    i32 10, i32 20, i32 30, i32 40,
    i32 50, i32 60, i32 70, i32 80,
    i32 90, i32 100, i32 110, i32 120,
    i32 130, i32 140, i32 150, i32 160,
    i32 170, i32 180, i32 190, i32 200,
    i32 210, i32 220, i32 230, i32 240,
    i32 250, i32 260, i32 270, i32 280,
    i32 290, i32 300, i32 310, i32 320,
    ptr addrspace(5) byval(i32) %alloca)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 0

define void @func_call_too_many_args_use_workitem_id_x_byval() #1 {
  %alloca = alloca i32, align 4, addrspace(5)
  store volatile i32 999, ptr addrspace(5) %alloca
  call void @too_many_args_use_workitem_id_x_byval(
    i32 10, i32 20, i32 30, i32 40,
    i32 50, i32 60, i32 70, i32 80,
    i32 90, i32 100, i32 110, i32 120,
    i32 130, i32 140, i32 150, i32 160,
    i32 170, i32 180, i32 190, i32 200,
    i32 210, i32 220, i32 230, i32 240,
    i32 250, i32 260, i32 270, i32 280,
    i32 290, i32 300, i32 310, i32 320,
    ptr addrspace(5) byval(i32) %alloca)
  ret void
}

define void @too_many_args_use_workitem_id_xyz(
  i32 %arg0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7,
  i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15,
  i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23,
  i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31) #1 {
  %val0 = call i32 @llvm.amdgcn.workitem.id.x()
  store volatile i32 %val0, ptr addrspace(1) poison
  %val1 = call i32 @llvm.amdgcn.workitem.id.y()
  store volatile i32 %val1, ptr addrspace(1) poison
  %val2 = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %val2, ptr addrspace(1) poison

  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %arg1, ptr addrspace(1) poison
  store volatile i32 %arg2, ptr addrspace(1) poison
  store volatile i32 %arg3, ptr addrspace(1) poison
  store volatile i32 %arg4, ptr addrspace(1) poison
  store volatile i32 %arg5, ptr addrspace(1) poison
  store volatile i32 %arg6, ptr addrspace(1) poison
  store volatile i32 %arg7, ptr addrspace(1) poison

  store volatile i32 %arg8, ptr addrspace(1) poison
  store volatile i32 %arg9, ptr addrspace(1) poison
  store volatile i32 %arg10, ptr addrspace(1) poison
  store volatile i32 %arg11, ptr addrspace(1) poison
  store volatile i32 %arg12, ptr addrspace(1) poison
  store volatile i32 %arg13, ptr addrspace(1) poison
  store volatile i32 %arg14, ptr addrspace(1) poison
  store volatile i32 %arg15, ptr addrspace(1) poison

  store volatile i32 %arg16, ptr addrspace(1) poison
  store volatile i32 %arg17, ptr addrspace(1) poison
  store volatile i32 %arg18, ptr addrspace(1) poison
  store volatile i32 %arg19, ptr addrspace(1) poison
  store volatile i32 %arg20, ptr addrspace(1) poison
  store volatile i32 %arg21, ptr addrspace(1) poison
  store volatile i32 %arg22, ptr addrspace(1) poison
  store volatile i32 %arg23, ptr addrspace(1) poison

  store volatile i32 %arg24, ptr addrspace(1) poison
  store volatile i32 %arg25, ptr addrspace(1) poison
  store volatile i32 %arg26, ptr addrspace(1) poison
  store volatile i32 %arg27, ptr addrspace(1) poison
  store volatile i32 %arg28, ptr addrspace(1) poison
  store volatile i32 %arg29, ptr addrspace(1) poison
  store volatile i32 %arg30, ptr addrspace(1) poison
  store volatile i32 %arg31, ptr addrspace(1) poison

  ret void
}

; frame[0] = ID { Z, Y, X }
define amdgpu_kernel void @kern_call_too_many_args_use_workitem_id_xyz() #1 {
  call void @too_many_args_use_workitem_id_xyz(
    i32 10, i32 20, i32 30, i32 40,
    i32 50, i32 60, i32 70, i32 80,
    i32 90, i32 100, i32 110, i32 120,
    i32 130, i32 140, i32 150, i32 160,
    i32 170, i32 180, i32 190, i32 200,
    i32 210, i32 220, i32 230, i32 240,
    i32 250, i32 260, i32 270, i32 280,
    i32 290, i32 300, i32 310, i32 320)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 2

; workitem ID X in register, yz on stack
; v31 = workitem ID X
; frame[0] = workitem { Z, Y, X }
define void @too_many_args_use_workitem_id_x_stack_yz(
  i32 %arg0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7,
  i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15,
  i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23,
  i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30) #1 {
  %val0 = call i32 @llvm.amdgcn.workitem.id.x()
  store volatile i32 %val0, ptr addrspace(1) poison
  %val1 = call i32 @llvm.amdgcn.workitem.id.y()
  store volatile i32 %val1, ptr addrspace(1) poison
  %val2 = call i32 @llvm.amdgcn.workitem.id.z()
  store volatile i32 %val2, ptr addrspace(1) poison

  store volatile i32 %arg0, ptr addrspace(1) poison
  store volatile i32 %arg1, ptr addrspace(1) poison
  store volatile i32 %arg2, ptr addrspace(1) poison
  store volatile i32 %arg3, ptr addrspace(1) poison
  store volatile i32 %arg4, ptr addrspace(1) poison
  store volatile i32 %arg5, ptr addrspace(1) poison
  store volatile i32 %arg6, ptr addrspace(1) poison
  store volatile i32 %arg7, ptr addrspace(1) poison

  store volatile i32 %arg8, ptr addrspace(1) poison
  store volatile i32 %arg9, ptr addrspace(1) poison
  store volatile i32 %arg10, ptr addrspace(1) poison
  store volatile i32 %arg11, ptr addrspace(1) poison
  store volatile i32 %arg12, ptr addrspace(1) poison
  store volatile i32 %arg13, ptr addrspace(1) poison
  store volatile i32 %arg14, ptr addrspace(1) poison
  store volatile i32 %arg15, ptr addrspace(1) poison

  store volatile i32 %arg16, ptr addrspace(1) poison
  store volatile i32 %arg17, ptr addrspace(1) poison
  store volatile i32 %arg18, ptr addrspace(1) poison
  store volatile i32 %arg19, ptr addrspace(1) poison
  store volatile i32 %arg20, ptr addrspace(1) poison
  store volatile i32 %arg21, ptr addrspace(1) poison
  store volatile i32 %arg22, ptr addrspace(1) poison
  store volatile i32 %arg23, ptr addrspace(1) poison

  store volatile i32 %arg24, ptr addrspace(1) poison
  store volatile i32 %arg25, ptr addrspace(1) poison
  store volatile i32 %arg26, ptr addrspace(1) poison
  store volatile i32 %arg27, ptr addrspace(1) poison
  store volatile i32 %arg28, ptr addrspace(1) poison
  store volatile i32 %arg29, ptr addrspace(1) poison
  store volatile i32 %arg30, ptr addrspace(1) poison

  ret void
}
; GCN: ScratchSize: 0

define amdgpu_kernel void @kern_call_too_many_args_use_workitem_id_x_stack_yz() #1 {
  call void @too_many_args_use_workitem_id_x_stack_yz(
    i32 10, i32 20, i32 30, i32 40,
    i32 50, i32 60, i32 70, i32 80,
    i32 90, i32 100, i32 110, i32 120,
    i32 130, i32 140, i32 150, i32 160,
    i32 170, i32 180, i32 190, i32 200,
    i32 210, i32 220, i32 230, i32 240,
    i32 250, i32 260, i32 270, i32 280,
    i32 290, i32 300, i32 310)
  ret void
}
; GCN: .amdhsa_system_vgpr_workitem_id 2

declare i32 @llvm.amdgcn.workitem.id.x() #0
declare i32 @llvm.amdgcn.workitem.id.y() #0
declare i32 @llvm.amdgcn.workitem.id.z() #0

attributes #0 = { nounwind readnone speculatable "amdgpu-flat-work-group-size"="1,512" }
attributes #1 = { nounwind noinline "amdgpu-flat-work-group-size"="1,512" }
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GCN: {{.*}}
; GFX7: {{.*}}
; GFX90A: {{.*}}
