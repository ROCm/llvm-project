; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx942          < %s  | FileCheck -check-prefixes=GFX,GFX-SDAG,GFX942-SDAG                 %s
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx950          < %s  | FileCheck -check-prefixes=GFX,GFX-SDAG,GFX950-SDAG                 %s
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx9-4-generic  < %s  | FileCheck -check-prefixes=GFX,GFX-SDAG,GFX9-4-GENERIC-SDAG %s

; RUN: llc -global-isel=1 -mtriple=amdgcn -mcpu=gfx942          < %s  | FileCheck -check-prefixes=GFX,GFX-ISEL,GFX942-ISEL                 %s
; RUN: llc -global-isel=1 -mtriple=amdgcn -mcpu=gfx950          < %s  | FileCheck -check-prefixes=GFX,GFX-ISEL,GFX950-ISEL                 %s
; RUN: llc -global-isel=1 -mtriple=amdgcn -mcpu=gfx9-4-generic  < %s  | FileCheck -check-prefixes=GFX,GFX-ISEL,GFX9-4-GENERIC-ISEL %s


;;==============================================================================
;; A few basic test cases
;;==============================================================================
define <4 x i32> @global_load_b128_0_00(ptr addrspace(1) %addr) {
; GFX-LABEL: global_load_b128_0_00:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !0)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_0_01(ptr addrspace(1) %addr) {
; GFX-LABEL: global_load_b128_0_01:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !1)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_0_10(ptr addrspace(1) %addr) {
; GFX-LABEL: global_load_b128_0_10:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !2)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_0_11(ptr addrspace(1) %addr) {
; GFX-LABEL: global_load_b128_0_11:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !3)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_saddr_0_00(ptr addrspace(1) inreg %addr) {
; GFX-LABEL: global_load_b128_saddr_0_00:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1]
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !0)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_saddr_0_01(ptr addrspace(1) inreg %addr) {
; GFX-LABEL: global_load_b128_saddr_0_01:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !1)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_saddr_0_02(ptr addrspace(1) inreg %addr) {
; GFX-LABEL: global_load_b128_saddr_0_02:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !2)
  ret <4 x i32> %data
}

define <4 x i32> @global_load_b128_saddr_0_03(ptr addrspace(1) inreg %addr) {
; GFX-LABEL: global_load_b128_saddr_0_03:
; GFX:       ; %bb.0: ; %entry
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
entry:
  %data = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !3)
  ret <4 x i32> %data
}

;;==============================================================================
;; Signed offset addressing modes (derived from global-saddr-load.ll) {
;;==============================================================================
;;------------------------------------------------------------------------------
;; No vgpr offset, constants
;;------------------------------------------------------------------------------

;; base only
define <4 x float> @global_load_i8_offset_0(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_0:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %sbase, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum gfx9 immediate offset
define <4 x float> @global_load_i8_offset_4095(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_4095:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4095
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum gfx9 immediate offset + 1
define <4 x float> @global_load_i8_offset_4096(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_4096:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-NEXT:    s_nop 1
; GFX-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum gfx9 immediate offset + 2
define <4 x float> @global_load_i8_offset_4097(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_4097:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:1 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_4097:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1001, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4097
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum negative gfx9 immediate offset
define <4 x float> @global_load_i8_offset_neg4096(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_neg4096:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-4096
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum negative gfx9 immediate offset -1
define <4 x float> @global_load_i8_offset_neg4097(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_neg4097:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xfffff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-1 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_neg4097:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xffffefff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4097
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum negative gfx9 immediate offset -2
define <4 x float> @global_load_i8_offset_neg4098(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_neg4098:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xfffff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_neg4098:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xffffeffe, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4098
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum gfx10 immediate offset
define <4 x float> @global_load_i8_offset_2048(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2048 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum gfx10 immediate offset + 1
define <4 x float> @global_load_i8_offset_2049(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_2049:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2049
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 2049
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum gfx10 immediate offset + 2
define <4 x float> @global_load_i8_offset_2050(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_2050:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2050 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 2050
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum negative gfx10 immediate offset
define <4 x float> @global_load_i8_offset_neg2048(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_neg2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2048 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum negative gfx10 immediate offset - 1
define <4 x float> @global_load_i8_offset_neg2049(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_neg2049:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2049 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -2049
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; base with maximum negative gfx10 immediate offset - 1
define <4 x float> @global_load_i8_offset_neg2050(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_neg2050:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2050
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -2050
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0x7FFFFF(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_0x7FFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x7ff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_0x7FFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0x7fffff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 8388607
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0xFFFFFF(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_0xFFFFFF:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_add_co_u32_e32 v0, vcc, 0xff800000, v0
; GFX-NEXT:    s_nop 1
; GFX-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -8388608
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0xFFFFFFFF(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_0xFFFFFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xfffff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_0xFFFFFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, -1, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294967295
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0x100000000(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_0x100000000:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_u32_e32 v1, 1, v1
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_0x100000000:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294967296
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0x100000001(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_0x100000001:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:1 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_0x100000001:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 1, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294967297
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0x100000FFF(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_0x100000FFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_0x100000FFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xfff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294971391
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_0x100001000(ptr addrspace(1) %sbase) {
; GFX-LABEL: global_load_i8_offset_0x100001000:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-NEXT:    s_nop 1
; GFX-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294971392
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_neg0xFFFFFFFF(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_neg0xFFFFFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-4095
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_neg0xFFFFFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 1, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4294967295
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_neg0x100000000(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_neg0x100000000:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_u32_e32 v1, -1, v1
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_neg0x100000000:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4294967296
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_neg0x100000001(ptr addrspace(1) %sbase) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_neg0x100000001:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-1 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_neg0x100000001:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, -1, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -2, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4294967297
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Basic addressing patterns
;;------------------------------------------------------------------------------

;; Basic pattern, no immediate offset.
define <4 x float> @global_load_i8_zext_vgpr(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx9
define <4 x float> @global_load_i8_zext_vgpr_offset_4095(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_4095:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_4095:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 4095
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx9 + 1
define <4 x float> @global_load_i8_zext_vgpr_offset_4096(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_4096:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_4096:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx9
define <4 x float> @global_load_i8_zext_vgpr_offset_neg4096(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_neg4096:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-4096 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_neg4096:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-4096 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx9 - 1
define <4 x float> @global_load_i8_zext_vgpr_offset_neg4097(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_neg4097:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xfffff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-1 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_neg4097:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xffffefff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -4097
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx10
define <4 x float> @global_load_i8_zext_vgpr_offset_2047(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_2047:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2047
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_2047:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2047
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 2047
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx10 + 1
define <4 x float> @global_load_i8_zext_vgpr_offset_2048(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_2048:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2048 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_2048:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:2048 sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx10
define <4 x float> @global_load_i8_zext_vgpr_offset_neg2048(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_neg2048:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2048 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_neg2048:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2048 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx10 - 1
define <4 x float> @global_load_i8_zext_vgpr_offset_neg2049(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_neg2049:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2049 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_neg2049:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-2049 sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -2049
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx12.
define <4 x float> @global_load_i8_zext_vgpr_offset_0x7FFFFF(ptr addrspace(1) %sbase, i32 %voffset) { %zext.offset = zext i32 %voffset to i64
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_0x7FFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x7ff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_0x7FFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0x7fffff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 8388607
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Minimum offset on gfx12.
define <4 x float> @global_load_i8_zext_vgpr_offset_0xFFFFFF(ptr addrspace(1) %sbase, i32 %voffset) { %zext.offset = zext i32 %voffset to i64
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_0xFFFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xff800000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_0xFFFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xff800000, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -8388608
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}


;; Maximum positive offset on gfx9, and immediate needs to be moved lower.
define <4 x float> @global_load_i8_zext_vgpr_offset_4095_gep_order(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_offset_4095_gep_order:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_offset_4095_gep_order:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4095
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; pointer addressing done in integers
define <4 x float> @global_load_i8_zext_vgpr_ptrtoint(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_ptrtoint:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_ptrtoint:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %sbase.as.int, %zext.offset
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; zext forced to LHS of addressing expression
define <4 x float> @global_load_i8_zext_vgpr_ptrtoint_commute_add(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_ptrtoint_commute_add:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 0, v[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_ptrtoint_commute_add:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; zext forced to LHS of addressing expression, with immediate offset
define <4 x float> @global_load_i8_zext_vgpr_ptrtoint_commute_add_imm_offset0(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_ptrtoint_commute_add_imm_offset0:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 0, v[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_ptrtoint_commute_add_imm_offset0:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %add.immoffset = add i64 %add, 128
  %dirty.gep = inttoptr i64 %add.immoffset to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; zext forced to LHS of addressing expression, with immediate offset in non-canonical position
define <4 x float> @global_load_i8_zext_vgpr_ptrtoint_commute_add_imm_offset1(ptr addrspace(1) %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_vgpr_ptrtoint_commute_add_imm_offset1:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_vgpr_ptrtoint_commute_add_imm_offset1:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add.immoffset = add i64 %sbase.as.int, 128
  %add = add i64 %zext.offset, %add.immoffset
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Uniformity edge cases
;;------------------------------------------------------------------------------

;; Both 64-bit base and 32-bit offset are scalar
define <4 x float> @global_load_i8_zext_uniform_offset(ptr addrspace(1) %sbase, i32 %soffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_uniform_offset:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_uniform_offset:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Both 64-bit base and 32-bit offset are scalar, with immediate offset.
define <4 x float> @global_load_i8_zext_uniform_offset_immoffset(ptr addrspace(1) %sbase, i32 %soffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_uniform_offset_immoffset:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-24
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_uniform_offset_immoffset:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-24
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -24
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Both components uniform, zext forced to LHS of addressing expression
define <4 x float> @global_load_i8_zext_sgpr_ptrtoint_commute_add(ptr addrspace(1) %sbase, i32 %soffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_sgpr_ptrtoint_commute_add:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 0, v[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_sgpr_ptrtoint_commute_add:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Both components uniform, zext forced to LHS of addressing expression, with immediate offset
define <4 x float> @global_load_i8_zext_sgpr_ptrtoint_commute_add_imm_offset0(ptr addrspace(1) %sbase, i32 %soffset) {
;
; GFX-SDAG-LABEL: global_load_i8_zext_sgpr_ptrtoint_commute_add_imm_offset0:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 0, v[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_zext_sgpr_ptrtoint_commute_add_imm_offset0:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %add.immoffset = add i64 %add, 128
  %dirty.gep = inttoptr i64 %add.immoffset to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; divergent 64-bit base, 32-bit scalar offset.
define <4 x float> @global_load_i8_vgpr64_sgpr32(ptr addrspace(1) %vbase, i32 %soffset) {
;
; GFX-SDAG-LABEL: global_load_i8_vgpr64_sgpr32:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_vgpr64_sgpr32:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %vbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; divergent 64-bit base, 32-bit scalar offset, with imm offset
define <4 x float> @global_load_i8_vgpr64_sgpr32_offset_4095(ptr addrspace(1) %vbase, i32 %soffset) {
;
; GFX-SDAG-LABEL: global_load_i8_vgpr64_sgpr32_offset_4095:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_vgpr64_sgpr32_offset_4095:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %vbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 4095
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Natural addressing shifts with restricted range
;;------------------------------------------------------------------------------

;; Cannot push the shift into 32-bits, and cannot match.
define <4 x float> @global_load_f32_natural_addressing(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr) {
; GFX-LABEL: global_load_f32_natural_addressing:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v2, v[2:3], off
; GFX-NEXT:    v_mov_b32_e32 v3, 0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 2, v[0:1]
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Cannot push the shift into 32-bits, with an immediate offset.
define <4 x float> @global_load_f32_natural_addressing_immoffset(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr) {
;
; GFX-SDAG-LABEL: global_load_f32_natural_addressing_immoffset:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v2, v[2:3], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_f32_natural_addressing_immoffset:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v2, v[2:3], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:128 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 128
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Range is sufficiently restricted to push the shift into 32-bits.
define <4 x float> @global_load_f32_zext_vgpr_range(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr) {
;
; GFX-SDAG-LABEL: global_load_f32_zext_vgpr_range:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v2, v[2:3], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshlrev_b32_e32 v2, 2, v2
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_f32_zext_vgpr_range:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v2, v[2:3], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_lshlrev_b32_e32 v2, 2, v2
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr, !range !4, !noundef !{}
  %zext.offset = zext i32 %voffset to i64
  %gep = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Range is sufficiently restricted to push the shift into 32-bits, with an imm offset
define <4 x float> @global_load_f32_zext_vgpr_range_imm_offset(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr) {
;
; GFX-SDAG-LABEL: global_load_f32_zext_vgpr_range_imm_offset:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v2, v[2:3], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, 0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshlrev_b32_e32 v2, 2, v2
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:400
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_f32_zext_vgpr_range_imm_offset:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v2, v[2:3], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_lshlrev_b32_e32 v2, 2, v2
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:400
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr, !range !4, !noundef !{}
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds float, ptr addrspace(1) %gep0, i64 100
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Range is 1 beyond the limit where we can move the shift into 32-bits.
define <4 x float> @global_load_f32_zext_vgpr_range_too_large(ptr addrspace(1) %sbase, ptr addrspace(1) %voffset.ptr) {
; GFX-LABEL: global_load_f32_zext_vgpr_range_too_large:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v2, v[2:3], off
; GFX-NEXT:    v_mov_b32_e32 v3, 0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 2, v[0:1]
; GFX-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr, !range !5, !noundef !{}
  %zext.offset = zext i32 %voffset to i64
  %gep = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; or-with-constant as add
;;------------------------------------------------------------------------------

;; Check add-as-or with split 64-bit or.
define <4 x float> @global_load_i8_offset_or_i64_imm_offset_16(ptr addrspace(6) %sbase, i32 %idx) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_or_i64_imm_offset_16:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_or_b32_e32 v0, 16, v1
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_or_i64_imm_offset_16:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b32_e32 v3, 0
; GFX-ISEL-NEXT:    v_or_b32_e32 v2, 16, v1
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[2:3], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.idx = zext i32 %idx to i64
  %or = or i64 %zext.idx, 16
  %addr = inttoptr i64 %or to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_i8_offset_or_i64_imm_offset_4160(ptr addrspace(6) %sbase, i32 %idx) {
;
; GFX-SDAG-LABEL: global_load_i8_offset_or_i64_imm_offset_4160:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_or_b32_e32 v0, 0x1040, v1
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_i8_offset_or_i64_imm_offset_4160:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b32_e32 v3, 0
; GFX-ISEL-NEXT:    v_or_b32_e32 v2, 0x1040, v1
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[2:3], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.idx = zext i32 %idx to i64
  %or = or i64 %zext.idx, 4160
  %addr = inttoptr i64 %or to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Full 64-bit scalar add.
;;------------------------------------------------------------------------------
define <4 x float> @global_addr_64bit_lsr_iv(ptr addrspace(1) %arg) {
;
; GFX-SDAG-LABEL: global_addr_64bit_lsr_iv:
; GFX-SDAG:       ; %bb.0: ; %bb
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_mov_b32 s0, -1
; GFX-SDAG-NEXT:  .LBB60_1: ; %bb3
; GFX-SDAG-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-SDAG-NEXT:    s_add_i32 s0, s0, 1
; GFX-SDAG-NEXT:    s_cmpk_eq_i32 s0, 0xff
; GFX-SDAG-NEXT:    s_cbranch_scc0 .LBB60_1
; GFX-SDAG-NEXT:  ; %bb.2: ; %bb2
; GFX-SDAG-NEXT:    s_mov_b32 s1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], s[0:1], 2, v[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_addr_64bit_lsr_iv:
; GFX-ISEL:       ; %bb.0: ; %bb
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_mov_b32 s0, -1
; GFX-ISEL-NEXT:    v_mov_b32_e32 v3, 0xff
; GFX-ISEL-NEXT:    v_mov_b32_e32 v2, s0
; GFX-ISEL-NEXT:  .LBB60_1: ; %bb3
; GFX-ISEL-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-ISEL-NEXT:    v_add_u32_e32 v2, 1, v2
; GFX-ISEL-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX-ISEL-NEXT:    s_cbranch_vccz .LBB60_1
; GFX-ISEL-NEXT:  ; %bb.2: ; %bb2
; GFX-ISEL-NEXT:    v_mov_b32_e32 v3, 0
; GFX-ISEL-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 2, v[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
bb:
  br label %bb3

bb2:                                              ; preds = %bb3
  ret <4 x float> %i6

bb3:                                              ; preds = %bb3, %bb
  %i = phi i32 [ 0, %bb ], [ %i8, %bb3 ]
  %i4 = zext i32 %i to i64
  %i5 = getelementptr inbounds float, ptr addrspace(1) %arg, i64 %i4
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %i5, metadata !0)
  %i6 = bitcast <4 x i32> %load to <4 x float>
  %i8 = add nuw nsw i32 %i, 1
  %i9 = icmp eq i32 %i8, 256
  br i1 %i9, label %bb2, label %bb3
}

;; Make sure we only have a single zero vaddr initialization.

define <4 x float> @global_addr_64bit_lsr_iv_multiload(ptr addrspace(1) %arg, ptr addrspace(1) %arg.1, i32 %x) {
;
; GFX-SDAG-LABEL: global_addr_64bit_lsr_iv_multiload:
; GFX-SDAG:       ; %bb.0: ; %bb
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_mov_b32 s0, -1
; GFX-SDAG-NEXT:  .LBB61_1: ; %bb5
; GFX-SDAG-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-SDAG-NEXT:    s_add_i32 s0, s0, 1
; GFX-SDAG-NEXT:    s_cmpk_eq_i32 s0, 0xff
; GFX-SDAG-NEXT:    s_cbranch_scc0 .LBB61_1
; GFX-SDAG-NEXT:  ; %bb.2: ; %bb2
; GFX-SDAG-NEXT:    s_mov_b32 s1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], s[0:1], 2, v[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_addr_64bit_lsr_iv_multiload:
; GFX-ISEL:       ; %bb.0: ; %bb
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_mov_b32 s0, -1
; GFX-ISEL-NEXT:    v_mov_b32_e32 v3, 0xff
; GFX-ISEL-NEXT:    v_mov_b32_e32 v2, s0
; GFX-ISEL-NEXT:  .LBB61_1: ; %bb5
; GFX-ISEL-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-ISEL-NEXT:    v_add_u32_e32 v2, 1, v2
; GFX-ISEL-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX-ISEL-NEXT:    s_cbranch_vccz .LBB61_1
; GFX-ISEL-NEXT:  ; %bb.2: ; %bb2
; GFX-ISEL-NEXT:    v_mov_b32_e32 v3, 0
; GFX-ISEL-NEXT:    v_lshl_add_u64 v[0:1], v[2:3], 2, v[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
bb:
  br label %bb5

bb2:
  %y = icmp eq i32 %x, 0
  br i1 %y, label %bb3, label %bb4

bb3:
  ret <4 x float> %i6

bb4:
  ret <4 x float> %i6.1

bb5:
  %i = phi i32 [ 0, %bb ], [ %i8, %bb5 ]
  %i4 = zext i32 %i to i64
  %i5 = getelementptr inbounds float, ptr addrspace(1) %arg, i64 %i4
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %i5, metadata !1)
  %i6 = bitcast <4 x i32> %load to <4 x float>
  %i5.1 = getelementptr inbounds float, ptr addrspace(1) %arg.1, i64 %i4
  %load.1 = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %i5, metadata !2)
  %i6.1 = bitcast <4 x i32> %load to <4 x float>
  %i8 = add nuw nsw i32 %i, 1
  %i9 = icmp eq i32 %i8, 256
  br i1 %i9, label %bb2, label %bb5
}
;;==============================================================================
;; } end signed offset addressing modes
;;==============================================================================

;;==============================================================================
;; Various saddr addressing modes (derived from global-saddr-load.ll) {
;;==============================================================================

;;------------------------------------------------------------------------------
;; No vgpr offset, constants
;;------------------------------------------------------------------------------

;; SGPR base only
define <4 x float> @global_load_saddr_i8_offset_0(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_0:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %sbase, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum gfx9 immediate offset
define <4 x float> @global_load_saddr_i8_offset_4095(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_4095:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:4095
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4095
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum gfx9 immediate offset + 1
define <4 x float> @global_load_saddr_i8_offset_4096(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_4096:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0x1000
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum gfx9 immediate offset + 2
define <4 x float> @global_load_saddr_i8_offset_4097(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_4097:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0x1000
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:1 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4097
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum negative gfx9 immediate offset
define <4 x float> @global_load_saddr_i8_offset_neg4096(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_neg4096:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-4096 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum negative gfx9 immediate offset -1
define <4 x float> @global_load_saddr_i8_offset_neg4097(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_neg4097:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    s_add_u32 s0, s0, 0xffffefff
; GFX-NEXT:    s_addc_u32 s1, s1, -1
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1]
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4097
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum negative gfx9 immediate offset -2
define <4 x float> @global_load_saddr_i8_offset_neg4098(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_neg4098:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    s_add_u32 s0, s0, 0xffffeffe
; GFX-NEXT:    s_addc_u32 s1, s1, -1
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4098
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum gfx10 immediate offset
define <4 x float> @global_load_saddr_i8_offset_2048(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:2048 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum gfx10 immediate offset + 1
define <4 x float> @global_load_saddr_i8_offset_2049(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_2049:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:2049 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 2049
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum gfx10 immediate offset + 2
define <4 x float> @global_load_saddr_i8_offset_2050(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_2050:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:2050
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 2050
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum negative gfx10 immediate offset
define <4 x float> @global_load_saddr_i8_offset_neg2048(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_neg2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-2048 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum negative gfx10 immediate offset - 1
define <4 x float> @global_load_saddr_i8_offset_neg2049(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_neg2049:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-2049 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -2049
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; SGPR base with maximum negative gfx10 immediate offset - 1
define <4 x float> @global_load_saddr_i8_offset_neg2050(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_neg2050:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-2050 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -2050
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0x7FFFFF(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_0x7FFFFF:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0x7ff000
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:4095
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 8388607
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0xFFFFFF(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_0xFFFFFF:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    s_add_u32 s0, s0, 0xff800000
; GFX-NEXT:    s_addc_u32 s1, s1, -1
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -8388608
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0xFFFFFFFF(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_0xFFFFFFFF:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, 0xfffff000
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:4095 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294967295
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0x100000000(ptr addrspace(1) inreg %sbase) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_0x100000000:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_add_i32 s1, s1, 1
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_0x100000000:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_add_u32 s0, s0, 0
; GFX-ISEL-NEXT:    s_addc_u32 s1, s1, 1
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294967296
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0x100000001(ptr addrspace(1) inreg %sbase) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_0x100000001:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, s1
; GFX-SDAG-NEXT:    v_add_co_u32_e64 v0, vcc, 0, s0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_0x100000001:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_add_u32 s0, s0, 1
; GFX-ISEL-NEXT:    s_addc_u32 s1, s1, 1
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294967297
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0x100000FFF(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_0x100000FFF:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    s_add_u32 s0, s0, 0xfff
; GFX-NEXT:    s_addc_u32 s1, s1, 1
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294971391
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_0x100001000(ptr addrspace(1) inreg %sbase) {
; GFX-LABEL: global_load_saddr_i8_offset_0x100001000:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    s_add_u32 s0, s0, 0x1000
; GFX-NEXT:    s_addc_u32 s1, s1, 1
; GFX-NEXT:    v_mov_b32_e32 v0, 0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4294971392
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_neg0xFFFFFFFF(ptr addrspace(1) inreg %sbase) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_neg0xFFFFFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, s0
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, s1
; GFX-SDAG-NEXT:    s_nop 0
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-4095 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_neg0xFFFFFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_add_u32 s0, s0, 1
; GFX-ISEL-NEXT:    s_addc_u32 s1, s1, -1
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4294967295
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_neg0x100000000(ptr addrspace(1) inreg %sbase) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_neg0x100000000:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_add_i32 s1, s1, -1
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1]
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_neg0x100000000:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_add_u32 s0, s0, 0
; GFX-ISEL-NEXT:    s_addc_u32 s1, s1, -1
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4294967296
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_neg0x100000001(ptr addrspace(1) inreg %sbase) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_neg0x100000001:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, s1
; GFX-SDAG-NEXT:    v_add_co_u32_e64 v0, vcc, 0, s0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-1 sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_neg0x100000001:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_add_u32 s0, s0, -1
; GFX-ISEL-NEXT:    s_addc_u32 s1, s1, -2
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[0:1], s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 -4294967297
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Basic addressing patterns
;;------------------------------------------------------------------------------

;; Basic pattern, no immediate offset.
define <4 x float> @global_load_saddr_i8_zext_vgpr(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx9
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_4095(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_4095:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:4095 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 4095
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx9 + 1
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_4096(ptr addrspace(1) inreg %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_zext_vgpr_offset_4096:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], s[0:1], 0, v[0:1]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_zext_vgpr_offset_4096:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[0:1]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v2, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v3, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0x1000, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx9
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_neg4096(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_neg4096:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-4096 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -4096
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx9 - 1
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_neg4097(ptr addrspace(1) inreg %sbase, i32 %voffset) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_zext_vgpr_offset_neg4097:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], s[0:1], 0, v[0:1]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xfffff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:-1 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_zext_vgpr_offset_neg4097:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[0:1]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v2, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v3, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xffffefff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -4097
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx10
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_2047(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_2047:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:2047 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 2047
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx10 + 1
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_2048(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:2048
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx10
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_neg2048(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_neg2048:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-2048 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -2048
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum negative offset on gfx10 - 1
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_neg2049(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_neg2049:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-2049 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -2049
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Maximum positive offset on gfx12.
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_0x7FFFFF(ptr addrspace(1) inreg %sbase, i32 %voffset) { %zext.offset = zext i32 %voffset to i64
;
; GFX-SDAG-LABEL: global_load_saddr_i8_zext_vgpr_offset_0x7FFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], s[0:1], 0, v[0:1]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0x7ff000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_zext_vgpr_offset_0x7FFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[0:1]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v2, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v3, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0x7fffff, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 8388607
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Minimum offset on gfx12.
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_0xFFFFFF(ptr addrspace(1) inreg %sbase, i32 %voffset) { %zext.offset = zext i32 %voffset to i64
;
; GFX-SDAG-LABEL: global_load_saddr_i8_zext_vgpr_offset_0xFFFFFF:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], s[0:1], 0, v[0:1]
; GFX-SDAG-NEXT:    v_add_co_u32_e32 v0, vcc, 0xff800000, v0
; GFX-SDAG-NEXT:    s_nop 1
; GFX-SDAG-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_zext_vgpr_offset_0xFFFFFF:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[0:1]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v2, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, 0, v3, vcc
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, 0xff800000, v0
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, -1, v1, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -8388608
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}


;; Maximum positive offset on gfx9, and immediate needs to be moved lower.
define <4 x float> @global_load_saddr_i8_zext_vgpr_offset_4095_gep_order(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_offset_4095_gep_order:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:4095 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 4095
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; pointer addressing done in integers
define <4 x float> @global_load_saddr_i8_zext_vgpr_ptrtoint(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_ptrtoint:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %sbase.as.int, %zext.offset
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; zext forced to LHS of addressing expression
define <4 x float> @global_load_saddr_i8_zext_vgpr_ptrtoint_commute_add(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_ptrtoint_commute_add:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; zext forced to LHS of addressing expression, with immediate offset
define <4 x float> @global_load_saddr_i8_zext_vgpr_ptrtoint_commute_add_imm_offset0(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_ptrtoint_commute_add_imm_offset0:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:128
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %add.immoffset = add i64 %add, 128
  %dirty.gep = inttoptr i64 %add.immoffset to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; zext forced to LHS of addressing expression, with immediate offset in non-canonical position
define <4 x float> @global_load_saddr_i8_zext_vgpr_ptrtoint_commute_add_imm_offset1(ptr addrspace(1) inreg %sbase, i32 %voffset) {
; GFX-LABEL: global_load_saddr_i8_zext_vgpr_ptrtoint_commute_add_imm_offset1:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:128 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %voffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add.immoffset = add i64 %sbase.as.int, 128
  %add = add i64 %zext.offset, %add.immoffset
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Uniformity edge cases
;;------------------------------------------------------------------------------

;; Both 64-bit base and 32-bit offset are scalar
define <4 x float> @global_load_saddr_i8_zext_uniform_offset(ptr addrspace(1) inreg %sbase, i32 inreg %soffset) {
; GFX-LABEL: global_load_saddr_i8_zext_uniform_offset:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, s2
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Both 64-bit base and 32-bit offset are scalar, with immediate offset.
define <4 x float> @global_load_saddr_i8_zext_uniform_offset_immoffset(ptr addrspace(1) inreg %sbase, i32 inreg %soffset) {
; GFX-LABEL: global_load_saddr_i8_zext_uniform_offset_immoffset:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, s2
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:-24 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 -24
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Both components uniform, zext forced to LHS of addressing expression
define <4 x float> @global_load_saddr_i8_zext_sgpr_ptrtoint_commute_add(ptr addrspace(1) inreg %sbase, i32 inreg %soffset) {
; GFX-LABEL: global_load_saddr_i8_zext_sgpr_ptrtoint_commute_add:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, s2
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1]
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %dirty.gep = inttoptr i64 %add to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Both components uniform, zext forced to LHS of addressing expression, with immediate offset
define <4 x float> @global_load_saddr_i8_zext_sgpr_ptrtoint_commute_add_imm_offset0(ptr addrspace(1) inreg %sbase, i32 inreg %soffset) {
; GFX-LABEL: global_load_saddr_i8_zext_sgpr_ptrtoint_commute_add_imm_offset0:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    v_mov_b32_e32 v0, s2
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:128 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %sbase.as.int = ptrtoint ptr addrspace(1) %sbase to i64
  %add = add i64 %zext.offset, %sbase.as.int
  %add.immoffset = add i64 %add, 128
  %dirty.gep = inttoptr i64 %add.immoffset to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %dirty.gep, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; divergent 64-bit base, 32-bit scalar offset.
define <4 x float> @global_load_saddr_i8_vgpr64_sgpr32(ptr addrspace(1) %vbase, i32 inreg %soffset) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_vgpr64_sgpr32:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_mov_b32 s1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, s[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_vgpr64_sgpr32:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_mov_b32 s1, 0
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[0:1]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, v1, v3, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %vbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep0, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; divergent 64-bit base, 32-bit scalar offset, with imm offset
define <4 x float> @global_load_saddr_i8_vgpr64_sgpr32_offset_4095(ptr addrspace(1) %vbase, i32 inreg %soffset) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_vgpr64_sgpr32_offset_4095:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_mov_b32 s1, 0
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 0, s[0:1]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_vgpr64_sgpr32_offset_4095:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_mov_b32 s1, 0
; GFX-ISEL-NEXT:    v_mov_b64_e32 v[2:3], s[0:1]
; GFX-ISEL-NEXT:    v_add_co_u32_e32 v0, vcc, v0, v2
; GFX-ISEL-NEXT:    s_nop 1
; GFX-ISEL-NEXT:    v_addc_co_u32_e32 v1, vcc, v1, v3, vcc
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off offset:4095 sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.offset = zext i32 %soffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %vbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 4095
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Natural addressing shifts with restricted range
;;------------------------------------------------------------------------------

;; Cannot push the shift into 32-bits, and cannot match.
define <4 x float> @global_load_saddr_f32_natural_addressing(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr) {
;
; GFX-SDAG-LABEL: global_load_saddr_f32_natural_addressing:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v0, v[0:1], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v2, s0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, s1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 2, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_f32_natural_addressing:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v0, v[0:1], off
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 2, s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Cannot push the shift into 32-bits, with an immediate offset.
define <4 x float> @global_load_saddr_f32_natural_addressing_immoffset(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr) {
; GFX-LABEL: global_load_saddr_f32_natural_addressing_immoffset:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v0, v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:128 sc0
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds i8, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds i8, ptr addrspace(1) %gep0, i64 128
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Range is sufficiently restricted to push the shift into 32-bits.
define <4 x float> @global_load_f32_saddr_zext_vgpr_range(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr) {
; GFX-LABEL: global_load_f32_saddr_zext_vgpr_range:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v0, v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr, !range !4, !noundef !{}
  %zext.offset = zext i32 %voffset to i64
  %gep = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Range is sufficiently restricted to push the shift into 32-bits, with an imm offset
define <4 x float> @global_load_f32_saddr_zext_vgpr_range_imm_offset(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr) {
; GFX-LABEL: global_load_f32_saddr_zext_vgpr_range_imm_offset:
; GFX:       ; %bb.0:
; GFX-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-NEXT:    global_load_dword v0, v[0:1], off
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] offset:400 sc0 sc1
; GFX-NEXT:    s_waitcnt vmcnt(0)
; GFX-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr, !range !4, !noundef !{}
  %zext.offset = zext i32 %voffset to i64
  %gep0 = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %gep1 = getelementptr inbounds float, ptr addrspace(1) %gep0, i64 100
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep1, metadata !3)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;; Range is 1 beyond the limit where we can move the shift into 32-bits.
define <4 x float> @global_load_f32_saddr_zext_vgpr_range_too_large(ptr addrspace(1) inreg %sbase, ptr addrspace(1) %voffset.ptr) {
;
; GFX-SDAG-LABEL: global_load_f32_saddr_zext_vgpr_range_too_large:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    global_load_dword v0, v[0:1], off
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v2, s0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v3, s1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 2, v[2:3]
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_f32_saddr_zext_vgpr_range_too_large:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    global_load_dword v0, v[0:1], off
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 2, s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %voffset = load i32, ptr addrspace(1) %voffset.ptr, !range !5, !noundef !{}
  %zext.offset = zext i32 %voffset to i64
  %gep = getelementptr inbounds float, ptr addrspace(1) %sbase, i64 %zext.offset
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %gep, metadata !0)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; or-with-constant as add
;;------------------------------------------------------------------------------

;; Check add-as-or with split 64-bit or.
define <4 x float> @global_load_saddr_i8_offset_or_i64_imm_offset_16(ptr addrspace(6) inreg %sbase, i32 %idx) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_or_i64_imm_offset_16:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_or_b32_e32 v0, 16, v0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_or_i64_imm_offset_16:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0
; GFX-ISEL-NEXT:    v_or_b32_e32 v0, 16, v0
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.idx = zext i32 %idx to i64
  %or = or i64 %zext.idx, 16
  %addr = inttoptr i64 %or to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !1)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

define <4 x float> @global_load_saddr_i8_offset_or_i64_imm_offset_4160(ptr addrspace(6) inreg %sbase, i32 %idx) {
;
; GFX-SDAG-LABEL: global_load_saddr_i8_offset_or_i64_imm_offset_4160:
; GFX-SDAG:       ; %bb.0:
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    v_or_b32_e32 v0, 0x1040, v0
; GFX-SDAG-NEXT:    v_mov_b32_e32 v1, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_load_saddr_i8_offset_or_i64_imm_offset_4160:
; GFX-ISEL:       ; %bb.0:
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0
; GFX-ISEL-NEXT:    v_or_b32_e32 v0, 0x1040, v0
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
  %zext.idx = zext i32 %idx to i64
  %or = or i64 %zext.idx, 4160
  %addr = inttoptr i64 %or to ptr addrspace(1)
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %addr, metadata !2)
  %cast.load = bitcast <4 x i32> %load to <4 x float>
  ret <4 x float> %cast.load
}

;;------------------------------------------------------------------------------
;; Full 64-bit scalar add.
;;------------------------------------------------------------------------------
define <4 x float> @global_saddr_64bit_lsr_iv(ptr addrspace(1) inreg %arg) {
;
; GFX-SDAG-LABEL: global_saddr_64bit_lsr_iv:
; GFX-SDAG:       ; %bb.0: ; %bb
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_mov_b32 s2, -1
; GFX-SDAG-NEXT:  .LBB114_1: ; %bb3
; GFX-SDAG-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-SDAG-NEXT:    s_add_i32 s2, s2, 1
; GFX-SDAG-NEXT:    s_cmpk_eq_i32 s2, 0xff
; GFX-SDAG-NEXT:    s_cbranch_scc0 .LBB114_1
; GFX-SDAG-NEXT:  ; %bb.2: ; %bb2
; GFX-SDAG-NEXT:    s_mov_b32 s3, 0
; GFX-SDAG-NEXT:    s_lshl_b64 s[2:3], s[2:3], 2
; GFX-SDAG-NEXT:    s_add_u32 s0, s0, s2
; GFX-SDAG-NEXT:    s_addc_u32 s1, s1, s3
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1] sc0 sc1
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_saddr_64bit_lsr_iv:
; GFX-ISEL:       ; %bb.0: ; %bb
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_mov_b32 s2, -1
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0xff
; GFX-ISEL-NEXT:    v_mov_b32_e32 v0, s2
; GFX-ISEL-NEXT:  .LBB114_1: ; %bb3
; GFX-ISEL-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-ISEL-NEXT:    v_add_u32_e32 v0, 1, v0
; GFX-ISEL-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX-ISEL-NEXT:    s_cbranch_vccz .LBB114_1
; GFX-ISEL-NEXT:  ; %bb.2: ; %bb2
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0
; GFX-ISEL-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 2, s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off sc0 sc1
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
bb:
  br label %bb3

bb2:                                              ; preds = %bb3
  ret <4 x float> %i6

bb3:                                              ; preds = %bb3, %bb
  %i = phi i32 [ 0, %bb ], [ %i8, %bb3 ]
  %i4 = zext i32 %i to i64
  %i5 = getelementptr inbounds float, ptr addrspace(1) %arg, i64 %i4
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %i5, metadata !3)
  %i6 = bitcast <4 x i32> %load to <4 x float>
  %i8 = add nuw nsw i32 %i, 1
  %i9 = icmp eq i32 %i8, 256
  br i1 %i9, label %bb2, label %bb3
}

;; Make sure we only have a single zero vaddr initialization.

define <4 x float> @global_saddr_64bit_lsr_iv_multiload(ptr addrspace(1) inreg %arg, ptr addrspace(1) inreg %arg.1, i32 %x) {
;
; GFX-SDAG-LABEL: global_saddr_64bit_lsr_iv_multiload:
; GFX-SDAG:       ; %bb.0: ; %bb
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-SDAG-NEXT:    s_mov_b32 s2, -1
; GFX-SDAG-NEXT:  .LBB115_1: ; %bb5
; GFX-SDAG-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-SDAG-NEXT:    s_add_i32 s2, s2, 1
; GFX-SDAG-NEXT:    s_cmpk_eq_i32 s2, 0xff
; GFX-SDAG-NEXT:    s_cbranch_scc0 .LBB115_1
; GFX-SDAG-NEXT:  ; %bb.2: ; %bb2
; GFX-SDAG-NEXT:    s_mov_b32 s3, 0
; GFX-SDAG-NEXT:    s_lshl_b64 s[2:3], s[2:3], 2
; GFX-SDAG-NEXT:    s_add_u32 s0, s0, s2
; GFX-SDAG-NEXT:    s_addc_u32 s1, s1, s3
; GFX-SDAG-NEXT:    v_mov_b32_e32 v0, 0
; GFX-SDAG-NEXT:    global_load_dwordx4 v[0:3], v0, s[0:1]
; GFX-SDAG-NEXT:    s_waitcnt vmcnt(0)
; GFX-SDAG-NEXT:    s_setpc_b64 s[30:31]
;
; GFX-ISEL-LABEL: global_saddr_64bit_lsr_iv_multiload:
; GFX-ISEL:       ; %bb.0: ; %bb
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX-ISEL-NEXT:    s_mov_b32 s2, -1
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0xff
; GFX-ISEL-NEXT:    v_mov_b32_e32 v0, s2
; GFX-ISEL-NEXT:  .LBB115_1: ; %bb5
; GFX-ISEL-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX-ISEL-NEXT:    v_add_u32_e32 v0, 1, v0
; GFX-ISEL-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX-ISEL-NEXT:    s_cbranch_vccz .LBB115_1
; GFX-ISEL-NEXT:  ; %bb.2: ; %bb2
; GFX-ISEL-NEXT:    v_mov_b32_e32 v1, 0
; GFX-ISEL-NEXT:    v_lshl_add_u64 v[0:1], v[0:1], 2, s[0:1]
; GFX-ISEL-NEXT:    global_load_dwordx4 v[0:3], v[0:1], off
; GFX-ISEL-NEXT:    s_waitcnt vmcnt(0)
; GFX-ISEL-NEXT:    s_setpc_b64 s[30:31]
bb:
  br label %bb5

bb2:
  %y = icmp eq i32 %x, 0
  br i1 %y, label %bb3, label %bb4

bb3:
  ret <4 x float> %i6

bb4:
  ret <4 x float> %i6.1

bb5:
  %i = phi i32 [ 0, %bb ], [ %i8, %bb5 ]
  %i4 = zext i32 %i to i64
  %i5 = getelementptr inbounds float, ptr addrspace(1) %arg, i64 %i4
  %load = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %i5, metadata !0)
  %i6 = bitcast <4 x i32> %load to <4 x float>
  %i5.1 = getelementptr inbounds float, ptr addrspace(1) %arg.1, i64 %i4
  %load.1 = call <4 x i32> @llvm.amdgcn.global.load.b128(ptr addrspace(1) %i5, metadata !1)
  %i6.1 = bitcast <4 x i32> %load to <4 x float>
  %i8 = add nuw nsw i32 %i, 1
  %i9 = icmp eq i32 %i8, 256
  br i1 %i9, label %bb2, label %bb5
}
;;==============================================================================
;; } End saddr addressing modes
;;==============================================================================

!0 = !{!"wavefront"}
!1 = !{!"workgroup"}
!2 = !{!"agent"}
!3 = !{!""}

!4 = !{i32 0, i32 1073741824} ; (1 << 30)
!5 = !{i32 0, i32 1073741825} ; (1 << 30) + 1

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GFX9-4-GENERIC-ISEL: {{.*}}
; GFX9-4-GENERIC-SDAG: {{.*}}
; GFX942-ISEL: {{.*}}
; GFX942-SDAG: {{.*}}
; GFX950-ISEL: {{.*}}
; GFX950-SDAG: {{.*}}
