; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes='sroa<preserve-cfg>' -S --experimental-debuginfo-iterators=true  < %s | FileCheck %s
; RUN: opt -passes='sroa<preserve-cfg>' -S --experimental-debuginfo-iterators=false < %s | FileCheck %s

source_filename = "test/Transforms/SROA/heterogeneous-poison.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%struct.pair = type { i32, i32 }

define i32 @t1() !dbg !9 {
  %local = alloca i32, align 4
  tail call void @llvm.dbg.declare(metadata ptr %local, metadata !13, metadata !DIExpression(DIOpArg(0, ptr addrspace(5)), DIOpDeref(i32))), !dbg !15
  store i32 2, ptr %local, align 4
  %read = load i32, ptr %local, align 4
  ret i32 %read
}

define i32 @t2(i1 %cond) !dbg !16 {
  %local = alloca i32, align 4
  tail call void @llvm.dbg.declare(metadata ptr %local, metadata !17, metadata !DIExpression(DIOpArg(0, ptr addrspace(5)), DIOpDeref(i32))), !dbg !18
  br i1 %cond, label %then, label %else

then:                                             ; preds = %0
  store i32 42, ptr %local, align 4
  br label %join

else:                                             ; preds = %0
  store i32 2, ptr %local, align 4
  br label %join

join:                                             ; preds = %else, %then
  %retval = load i32, ptr %local, align 4
  ret i32 %retval
}

define void @t3() !dbg !19 {
  %local = alloca %struct.pair, align 4
  tail call void @llvm.dbg.declare(metadata ptr %local, metadata !20, metadata !DIExpression(DIOpArg(0, ptr addrspace(5)), DIOpDeref(%struct.pair))), !dbg !25
  %first = getelementptr inbounds %struct.pair, ptr %local, i32 0, i32 0
  store i32 42, ptr %first, align 4
  %second = getelementptr inbounds %struct.pair, ptr %local, i32 0, i32 1
  store i32 43, ptr %second, align 4
  ret void
}

define i32 @t4() !dbg !26 {

  ;; FIXME(diexpression-poison): We could probably preserve debug info for the dbg.value here if
  ;; necessary. Check that we at least do something sensible with it for now.
  %local = alloca i32, align 4
  tail call void @llvm.dbg.value(metadata ptr %local, metadata !27, metadata !DIExpression(DIOpArg(0, ptr addrspace(5)), DIOpDeref(i32))), !dbg !28
  store i32 42, ptr %local, align 4
  %loaded = load i32, ptr %local, align 4
  ret i32 %loaded
}

define i16 @t5(i1 %cond) !dbg !29 {

  ;; Verify that we still convert if the new value doesn't cover the entire size
  ;; of the variable !30. This is something that old-style DIExpressions don't
  ;; support.

  %local = alloca i16, align 4
  tail call void @llvm.dbg.declare(metadata ptr %local, metadata !30, metadata !DIExpression(DIOpArg(0, ptr addrspace(5)), DIOpDeref(i16), DIOpSExt(i32))), !dbg !31
  br i1 %cond, label %then, label %else

then:                                             ; preds = %0
  store i16 42, ptr %local, align 4
  br label %join

else:                                             ; preds = %0
  store i16 43, ptr %local, align 4
  br label %join

join:                                             ; preds = %else, %then
  %loaded = load i16, ptr %local, align 4
  ret i16 %loaded
}

%struct.pair.pair = type { %struct.pair, %struct.pair }

define void @t6() !dbg !32 {

  %first = alloca %struct.pair, align 4
  %second = alloca %struct.pair, align 4
  tail call void @llvm.dbg.declare(metadata ptr %first, metadata !37, metadata !DIExpression(DIOpArg(0, ptr), DIOpDeref(%struct.pair), DIOpFragment(0, 64))), !dbg !38
  tail call void @llvm.dbg.declare(metadata ptr %second, metadata !37, metadata !DIExpression(DIOpArg(0, ptr), DIOpDeref(%struct.pair), DIOpFragment(64, 64))), !dbg !38
  %f0_ptr = getelementptr inbounds %struct.pair, ptr %first, i32 0, i32 0
  store i32 0, ptr %f0_ptr, align 4
  %f1_ptr = getelementptr inbounds %struct.pair, ptr %first, i32 0, i32 1
  store i32 1, ptr %f1_ptr, align 4
  %f2_ptr = getelementptr inbounds %struct.pair, ptr %second, i32 0, i32 0
  store i32 2, ptr %f2_ptr, align 4
  %f3_ptr = getelementptr inbounds %struct.pair, ptr %second, i32 0, i32 1
  store i32 3, ptr %f3_ptr, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang 19", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "t.cpp", directory: "/")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{!"clang 19"}
!9 = distinct !DISubprogram(name: "t1", linkageName: "t1", scope: !1, file: !1, line: 7, type: !10, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!10 = !DISubroutineType(types: !11)
!11 = !{null}
!12 = !{!13}
!13 = !DILocalVariable(name: "local", scope: !9, file: !1, line: 8, type: !14)
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !DILocation(line: 8, column: 3, scope: !9)
!16 = distinct !DISubprogram(name: "t2", linkageName: "t2", scope: !1, file: !1, line: 7, type: !10, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!17 = !DILocalVariable(name: "local", scope: !16, file: !1, line: 1, type: !14)
!18 = !DILocation(line: 1, column: 1, scope: !16)
!19 = distinct !DISubprogram(name: "t3", linkageName: "t3", scope: !1, file: !1, line: 7, type: !10, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!20 = !DILocalVariable(name: "local", scope: !19, file: !1, line: 1, type: !21)
!21 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pair", file: !1, line: 2, size: 64, flags: DIFlagTypePassByValue, elements: !22, identifier: "pair")
!22 = !{!23, !24}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "s1", scope: !21, file: !1, line: 3, baseType: !14, size: 32)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "s2", scope: !21, file: !1, line: 4, baseType: !14, size: 32, offset: 32)
!25 = !DILocation(line: 1, column: 1, scope: !19)
!26 = distinct !DISubprogram(name: "t4", linkageName: "t4", scope: !1, file: !1, line: 7, type: !10, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!27 = !DILocalVariable(name: "local", scope: !26, file: !1, line: 1, type: !14)
!28 = !DILocation(line: 1, column: 1, scope: !26)
!29 = distinct !DISubprogram(name: "t5", linkageName: "t5", scope: !1, file: !1, line: 7, type: !10, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!30 = !DILocalVariable(name: "local_i16", scope: !29, file: !1, line: 1, type: !14)
!31 = !DILocation(line: 1, column: 1, scope: !29)
!32 = distinct !DISubprogram(name: "t6", linkageName: "t56", scope: !1, file: !1, line: 7, type: !10, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!33 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pair_pair", file: !1, line: 2, size: 128, flags: DIFlagTypePassByValue, elements: !36, identifier: "pair_pair")
!34 = !DIDerivedType(tag: DW_TAG_member, name: "s1", scope: !33, file: !1, line: 3, baseType: !21, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "s2", scope: !33, file: !1, line: 4, baseType: !21, size: 64, offset: 64)
!36 = !{!34, !35}
!37 = !DILocalVariable(name: "local", scope: !32, file: !1, line: 1, type: !33)
!38 = !DILocation(line: 1, column: 1, scope: !32)

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
