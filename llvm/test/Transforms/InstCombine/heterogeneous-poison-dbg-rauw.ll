; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=instcombine --experimental-debuginfo-iterators=true  -S | FileCheck %s
; RUN: opt < %s -passes=instcombine --experimental-debuginfo-iterators=false -S | FileCheck %s

;; Test replaceAllDbgUsesWith(). InstCombine uses this function when there is a
;; cast of a cast it can eliminate (see InstCombinerImpl::commonCastTransforms).

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare void @use_i32(i32)
declare void @use_i64(i32)
declare void @use_ptr(ptr)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

define void @test_int_ptr_int(i64 %A) !dbg !5 {
  %1 = inttoptr i64 %A to ptr
  tail call void @llvm.dbg.value(metadata ptr %1, metadata !9, metadata !DIExpression(DIOpArg(0, ptr))), !dbg !12
  %2 = ptrtoint ptr %1 to i64
  call void @use_i64(i64 %2)
  ret void
}

define void @test_ptr_int_ptr(ptr %A) !dbg !13 {
  %1 = ptrtoint ptr %A to i64
  tail call void @llvm.dbg.value(metadata i64 %1, metadata !15, metadata !DIExpression(DIOpArg(0, i64))), !dbg !17
  %2 = inttoptr i64 %1 to ptr
  call void @use_ptr(ptr %2)
  ret void
}

define void @test_zext_trunc(i32 %A) !dbg !18 {
  %1 = zext i32 %A to i64
  tail call void @llvm.dbg.value(metadata i64 %1, metadata !20, metadata !DIExpression(DIOpArg(0, i64))), !dbg !23
  %2 = trunc i64 %1 to i32
  call void @use_i32(i32 %2)
  ret void
}

define void @test_trunc_zext(i64 %A) !dbg !24 {
  %1 = trunc i64 %A to i32
  tail call void @llvm.dbg.value(metadata i32 %1, metadata !26, metadata !DIExpression(DIOpArg(0, i32))), !dbg !28
  %2 = zext i32 %1 to i64
  call void @use_i64(i64 %2)
  ret void
}

define void @test_sext_trunc(i32 %A) !dbg !29 {
  %1 = sext i32 %A to i64
  tail call void @llvm.dbg.value(metadata i64 %1, metadata !31, metadata !DIExpression(DIOpArg(0, i64))), !dbg !33
  %2 = trunc i64 %1 to i32
  call void @use_i32(i32 %2)
  ret void
}

!llvm.dbg.cu = !{!0}
!llvm.debugify = !{!2, !3}
!llvm.module.flags = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "debugify", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!1 = !DIFile(filename: "t.c", directory: "/")
!2 = !{i32 16}
!3 = !{i32 8}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "test_int_ptr_int", linkageName: "test_int_ptr_int", scope: null, file: !1, line: 1, type: !6, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !8)
!6 = !DISubroutineType(types: !7)
!7 = !{}
!8 = !{!9, !11}
!9 = !DILocalVariable(name: "1", scope: !5, file: !1, line: 1, type: !10)
!10 = !DIBasicType(name: "ty64", size: 64, encoding: DW_ATE_unsigned)
!11 = !DILocalVariable(name: "2", scope: !5, file: !1, line: 2, type: !10)
!12 = !DILocation(line: 1, column: 1, scope: !5)
!13 = distinct !DISubprogram(name: "test_ptr_int_ptr", linkageName: "test_ptr_int_ptr", scope: null, file: !1, line: 5, type: !6, scopeLine: 5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !14)
!14 = !{!15, !16}
!15 = !DILocalVariable(name: "3", scope: !13, file: !1, line: 5, type: !10)
!16 = !DILocalVariable(name: "4", scope: !13, file: !1, line: 6, type: !10)
!17 = !DILocation(line: 5, column: 1, scope: !13)
!18 = distinct !DISubprogram(name: "test_zext_trunc", linkageName: "test_zext_trunc", scope: null, file: !1, line: 9, type: !6, scopeLine: 9, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !19)
!19 = !{!20, !21}
!20 = !DILocalVariable(name: "5", scope: !18, file: !1, line: 9, type: !10)
!21 = !DILocalVariable(name: "6", scope: !18, file: !1, line: 10, type: !22)
!22 = !DIBasicType(name: "ty32", size: 32, encoding: DW_ATE_unsigned)
!23 = !DILocation(line: 9, column: 1, scope: !18)
!24 = distinct !DISubprogram(name: "test_trunc_zext", linkageName: "test_trunc_zext", scope: null, file: !1, line: 13, type: !6, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !25)
!25 = !{!26, !27}
!26 = !DILocalVariable(name: "7", scope: !24, file: !1, line: 13, type: !22)
!27 = !DILocalVariable(name: "8", scope: !24, file: !1, line: 14, type: !10)
!28 = !DILocation(line: 13, column: 1, scope: !24)
!29 = distinct !DISubprogram(name: "test_sext_trunc", linkageName: "test_sext_trunc", scope: null, file: !1, line: 13, type: !6, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !30)
!30 = !{!31}
!31 = !DILocalVariable(name: "9", scope: !29, file: !1, line: 13, type: !32)
!32 = !DIBasicType(name: "tys32", size: 32, encoding: DW_ATE_signed)
!33 = !DILocation(line: 13, column: 1, scope: !29)
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
